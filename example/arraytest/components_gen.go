// This file is generated by github.com/mikekonan/go-oas3. DO NOT EDIT.

package arraytest

import (
	"encoding/json"
	"fmt"
	validation "github.com/go-ozzo/ozzo-validation/v4"
)

type arrayTestRequest struct {
	RequiredStringArray *[]string      `json:"requiredStringArray"`
	EmptyAllowedArray   []string       `json:"emptyAllowedArray"`
	ObjectArray         []NestedObject `json:"objectArray"`
	OptionalStringArray []string       `json:"optionalStringArray"`
	RequiredIntArray    *[]int         `json:"requiredIntArray"`
}

type ArrayTestRequest struct {
	ObjectArray         []NestedObject `json:"objectArray"`
	OptionalStringArray []string       `json:"optionalStringArray"`
	RequiredIntArray    []int          `json:"requiredIntArray"`
	RequiredStringArray []string       `json:"requiredStringArray"`
	EmptyAllowedArray   []string       `json:"emptyAllowedArray"`
}

func (a *ArrayTestRequest) UnmarshalJSON(data []byte) error {
	var value arrayTestRequest
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	if value.RequiredStringArray == nil {
		return fmt.Errorf("field '%s' is required but was null or missing", "RequiredStringArray")
	}
	if value.RequiredIntArray == nil {
		return fmt.Errorf("field '%s' is required but was null or missing", "RequiredIntArray")
	}
	a.EmptyAllowedArray = value.EmptyAllowedArray
	a.ObjectArray = value.ObjectArray
	a.OptionalStringArray = value.OptionalStringArray
	a.RequiredIntArray = *value.RequiredIntArray
	a.RequiredStringArray = *value.RequiredStringArray
	return nil
}

func (A ArrayTestRequest) Validate() error {
	return validation.ValidateStruct(&A, validation.Field(&A.RequiredIntArray, validation.Required, validation.Length(2, 1000000)), validation.Field(&A.RequiredStringArray, validation.Required, validation.Length(1, 10)), validation.Field(&A.EmptyAllowedArray, validation.Length(0, 3)), validation.Field(&A.ObjectArray, validation.Length(0, 1000000)), validation.Field(&A.OptionalStringArray, validation.Length(0, 5)))
}

type nestedObject struct {
	ID   *string `json:"id"`
	Name string  `json:"name"`
}

type NestedObject struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (n *NestedObject) UnmarshalJSON(data []byte) error {
	var value nestedObject
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	if value.ID == nil {
		return fmt.Errorf("field '%s' is required but was null or missing", "ID")
	}
	n.Name = value.Name
	n.ID = *value.ID
	return nil
}

func (N NestedObject) Validate() error {
	return nil
}
