// This file is generated by github.com/mikekonan/go-oas3. DO NOT EDIT.

package example

import (
	"encoding/json"
	"fmt"
	validation "github.com/go-ozzo/ozzo-validation/v4"
	uuid "github.com/google/uuid"
	countries "github.com/mikekonan/go-types/v2/country"
	currency "github.com/mikekonan/go-types/v2/currency"
	email "github.com/mikekonan/go-types/v2/email"
	url "github.com/mikekonan/go-types/v2/url"
	"regexp"
	"strings"
	"time"
)

var regexParamRegex = regexp.MustCompile("^[.?\\d]+$")

var fingerprintRegex = regexp.MustCompile("[0-9a-fA-F]+")

type Email = email.Email

type RawPayload = []byte

type URL = url.URL

type GenericResponse struct {
	Result Result `json:"result"`
}

func (G GenericResponse) Validate() error {
	return nil
}

type Time = time.Time

type updateTransactionRequest struct {
	Description *string `json:"description"`
	Details     *string `json:"details,omitempty"`
	Title       string  `json:"title"`
}

type UpdateTransactionRequest struct {
	Details     *string `json:"details,omitempty"`
	Title       string  `json:"title"`
	Description string  `json:"description"`
}

func (u *UpdateTransactionRequest) UnmarshalJSON(data []byte) error {
	var value updateTransactionRequest
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	if value.Description == nil {
		return fmt.Errorf("field '%s' is required but was null or missing", "Description")
	}
	u.Description = strings.TrimSpace(*value.Description)
	u.Details = value.Details
	u.Title = value.Title
	return nil
}

type Boolean = bool

type createTransactionRequest struct {
	RegexParam    string               `json:"regexParam"`
	TransactionID uuid.UUID            `json:"transactionID"`
	Amount        float64              `json:"amount"`
	Currency      currency.Code        `json:"currency"`
	Description   *string              `json:"description"`
	Details       *string              `json:"details,omitempty"`
	CallbackURL   url.URL              `json:"callbackURL"`
	Country       countries.Alpha2Code `json:"country"`
	Email         email.Email          `json:"email"`
	Title         string               `json:"title"`
	AmountCents   int                  `json:"amountCents"`
}

type CreateTransactionRequest struct {
	Amount        float64              `json:"amount"`
	Currency      currency.Code        `json:"currency"`
	Description   string               `json:"description"`
	Details       *string              `json:"details,omitempty"`
	CallbackURL   url.URL              `json:"callbackURL"`
	Country       countries.Alpha2Code `json:"country"`
	Email         email.Email          `json:"email"`
	Title         string               `json:"title"`
	AmountCents   int                  `json:"amountCents"`
	RegexParam    string               `json:"regexParam"`
	TransactionID uuid.UUID            `json:"transactionID"`
}

func (c *CreateTransactionRequest) UnmarshalJSON(data []byte) error {
	var value createTransactionRequest
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	if value.Description == nil {
		return fmt.Errorf("field '%s' is required but was null or missing", "Description")
	}
	c.Details = value.Details
	c.CallbackURL = value.CallbackURL
	c.Country = value.Country
	c.Email = value.Email
	c.Title = value.Title
	c.AmountCents = value.AmountCents
	c.RegexParam = value.RegexParam
	c.TransactionID = value.TransactionID
	c.Amount = value.Amount
	c.Currency = value.Currency
	c.Description = strings.TrimSpace(*value.Description)
	return nil
}

func (C CreateTransactionRequest) Validate() error {
	return validation.ValidateStruct(&C, validation.Field(&C.Title, validation.Skip.When(C.Title == ""), validation.RuneLength(8, 50)), validation.Field(&C.Title, validation.By(func(value interface{}) error {
		if str, ok := value.(string); ok {
			trimmed := strings.TrimSpace(str)
			if str != trimmed {
				return fmt.Errorf("value should be trimmed")
			}
		}
		return nil
	})), validation.Field(&C.AmountCents, validation.Max(100)), validation.Field(&C.RegexParam, validation.Match(regexParamRegex)), validation.Field(&C.Amount, validation.Min(0.009).Exclusive()), validation.Field(&C.Currency, validation.Skip.When(C.Currency == ""), validation.RuneLength(3, 3)), validation.Field(&C.Description, validation.Skip.When(C.Description == ""), validation.RuneLength(8, 100)), validation.Field(&C.Description, validation.By(func(value interface{}) error {
		if str, ok := value.(string); ok {
			trimmed := strings.TrimSpace(str)
			if str != trimmed {
				return fmt.Errorf("value should be trimmed")
			}
		}
		return nil
	})), validation.Field(&C.Country, validation.Skip.When(C.Country == ""), validation.RuneLength(2, 2)))
}

type CountryAlpha2 = countries.Alpha2Code

type WithEnum string

const (
	WithEnumOne WithEnum = "one"
	WithEnumTwo WithEnum = "two"
)

func (w WithEnum) Validate() error {
	switch w {
	case WithEnumOne:
		return nil
	case WithEnumTwo:
		return nil
	default:
		return fmt.Errorf("invalid %s enum value", w)
	}
}

type CurrencyCode = currency.Code

type Currency = currency.Code

type Country = countries.Alpha2Code

type Result string

const (
	ResultSuccess Result = "success"
	ResultFailed  Result = "failed"
)

func (r Result) Validate() error {
	switch r {
	case ResultSuccess:
		return nil
	case ResultFailed:
		return nil
	default:
		return fmt.Errorf("invalid %s enum value", r)
	}
}
