// This file is generated by github.com/mikekonan/go-oas3. DO NOT EDIT.

package minimal

import (
	"context"
	"encoding/json"
	chi "github.com/go-chi/chi/v5"
	"net/http"
)

type DefaultService interface {
	GetTest(ctx context.Context, request *GetTestRequest) *GetTestResponse
}

type DefaultRouter struct {
	service DefaultService
	router  *chi.Mux
	hooks   *Hooks
}

func NewDefaultRouter(service DefaultService) *DefaultRouter {
	router := chi.NewMux()
	instance := &DefaultRouter{service: service, router: router, hooks: &Hooks{}}
	return instance
}

func (router *DefaultRouter) getTest(w http.ResponseWriter, r *http.Request) {
	var request GetTestRequest

	request = router.parseGetTestRequest(r)

	response := router.service.GetTest(r.Context(), &request)
	response.WriteTo(w)
}

func (router *DefaultRouter) parseGetTestRequest(r *http.Request) (request GetTestRequest) {
	request.ProcessingResult = RequestProcessingResult{typee: ParseSucceed}

	if router.hooks.RequestParseCompleted != nil {
		router.hooks.RequestParseCompleted(r, "GetTest")
	}

	return
}

type Hooks struct {
	RequestSecurityParseFailed    func(*http.Request, string, RequestProcessingResult)
	RequestSecurityParseCompleted func(*http.Request, string)
	RequestSecurityCheckFailed    func(*http.Request, string, string, RequestProcessingResult)
	RequestSecurityCheckCompleted func(*http.Request, string, string)
	RequestBodyUnmarshalFailed    func(*http.Request, string, RequestProcessingResult)
	RequestHeaderParseFailed      func(*http.Request, string, string, RequestProcessingResult)
	RequestPathParseFailed        func(*http.Request, string, string, RequestProcessingResult)
	RequestQueryParseFailed       func(*http.Request, string, string, RequestProcessingResult)
	RequestBodyValidationFailed   func(*http.Request, string, RequestProcessingResult)
	RequestHeaderValidationFailed func(*http.Request, string, RequestProcessingResult)
	RequestPathValidationFailed   func(*http.Request, string, RequestProcessingResult)
	RequestQueryValidationFailed  func(*http.Request, string, RequestProcessingResult)
	RequestBodyUnmarshalCompleted func(*http.Request, string)
	RequestHeaderParseCompleted   func(*http.Request, string)
	RequestPathParseCompleted     func(*http.Request, string)
	RequestQueryParseCompleted    func(*http.Request, string)
	RequestParseCompleted         func(*http.Request, string)
	RequestProcessingCompleted    func(*http.Request, string)
	RequestRedirectStarted        func(*http.Request, string, string)
	ResponseBodyMarshalCompleted  func(*http.Request, string)
	ResponseBodyWriteCompleted    func(*http.Request, string, int)
	ResponseBodyMarshalFailed     func(http.ResponseWriter, *http.Request, string, error)
	ResponseBodyWriteFailed       func(*http.Request, string, int, error)
	ServiceCompleted              func(*http.Request, string)
}

type requestProcessingResultType uint8

const (
	BodyUnmarshalFailed requestProcessingResultType = iota + 1
	BodyValidationFailed
	HeaderParseFailed
	HeaderValidationFailed
	QueryParseFailed
	QueryValidationFailed
	PathParseFailed
	PathValidationFailed
	SecurityParseFailed
	SecurityCheckFailed
	ParseSucceed
)

type RequestProcessingResult struct {
	error error
	typee requestProcessingResultType
}

func NewRequestProcessingResult(t requestProcessingResultType, err error) RequestProcessingResult {
	return RequestProcessingResult{
		error: err,
		typee: t,
	}
}

func (r RequestProcessingResult) Type() requestProcessingResultType {
	return r.typee
}

func (r RequestProcessingResult) Err() error {
	return r.error
}

type response struct {
	body        interface{}
	contentType string
	statusCode  int
	headers     map[string]string
}

func (r *response) WriteTo(w http.ResponseWriter) {
	for key, value := range r.headers {
		w.Header().Set(key, value)
	}
	w.Header().Set("Content-Type", r.contentType)
	w.WriteHeader(r.statusCode)
	switch body := r.body.(type) {
	case string:
		w.Write([]byte(body))
	case []byte:
		w.Write(body)
	default:
		if r.body != nil {
			json.NewEncoder(w).Encode(r.body)
		}
	}
}

type DefaultResponse struct {
	*response
}

func (r *DefaultResponse) WriteTo(w http.ResponseWriter) {
	if r.response != nil {
		r.response.WriteTo(w)
	}
}

type GetTestResponse struct {
	*response
}

func (r *GetTestResponse) WriteTo(w http.ResponseWriter) {
	if r.response != nil {
		r.response.WriteTo(w)
	}
}

type GetTestStatus200Builder struct {
	response *response
}

func (b *GetTestStatus200Builder) Status() *GetTest200ContentTypeBuilder {
	b.response.statusCode = 200
	return &GetTest200ContentTypeBuilder{response: b.response}
}

type GetTest200ContentTypeBuilder struct {
	response *response
}

type GetTestResponseInterface interface {
	WriteTo(http.ResponseWriter)
}

type GetTestRequest struct {
	ProcessingResult RequestProcessingResult
}
