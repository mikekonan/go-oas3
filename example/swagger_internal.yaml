openapi: 3.0.0
info:
  title: FinteqHub API Reference
  description: "The Processing API provides you an interface to seamlessly integrate with FinteqHub for managing transactions \nfrom your customers. \n\nKey features: \n* Retrieve available payment methods.\n* Initiate transactions.\n* Receive merchant callbacks.\n* Retrieve transaction results.\n* Manage customer accounts.\n"
  contact: {}
  x-logo:
    url: https://finteqhub.com/wp-content/uploads/Group-873-1.svg
    href: https://finteqhub.com
servers:
- url: /
paths:
  /v1/sessions/{uuid}:
    get:
      parameters:
      - $ref: '#/components/parameters/MerchantID'
      - $ref: '#/components/parameters/UUID'
      - $ref: '#/components/parameters/RequestID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSessionResponseBody'
          description: OK
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          $ref: '#/components/responses/404'
        "408":
          $ref: '#/components/responses/408'
        "500":
          $ref: '#/components/responses/500'
      tags:
      - Sessions
      description: Get Session
      summary: Get Session
  /v1/secure/sessions/{uuid}:
    get:
      parameters:
      - $ref: '#/components/parameters/MerchantID'
      - $ref: '#/components/parameters/UUID'
      - $ref: '#/components/parameters/RequestID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSessionResponseBody'
          description: OK
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          $ref: '#/components/responses/404'
        "408":
          $ref: '#/components/responses/408'
        "500":
          $ref: '#/components/responses/500'
      tags:
      - Sessions
      description: Get Session With Secured MerchantID
      summary: Get Session With Secured MerchantID
  /v1/virtual-payment-methods:
    get:
      security:
      - Bearer: []
      - JwsSignature: []
      parameters:
      - $ref: '#/components/parameters/MerchantID'
      - $ref: '#/components/parameters/ProjectID'
      - $ref: '#/components/parameters/RequestID'
      responses:
        "200":
          headers:
            x-jws-signature:
              schema:
                type: string
              description: response signature
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListVirtualPaymentMethodsResponseBody'
          description: OK
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          $ref: '#/components/responses/404'
        "408":
          $ref: '#/components/responses/408'
        "500":
          $ref: '#/components/responses/500'
      tags:
      - V1 Virtual Payment Method
      - Virtual Payment Method
      description: List virtual payment methods
      summary: List virtual payment methods
  /v1/virtual-payment-methods/{name}:
    get:
      security:
      - Bearer: []
      - JwsSignature: []
      parameters:
      - $ref: '#/components/parameters/MerchantID'
      - $ref: '#/components/parameters/ProjectID'
      - $ref: '#/components/parameters/RequestID'
      - $ref: '#/components/parameters/VirtualPaymentMethodID'
      responses:
        "200":
          headers:
            x-jws-signature:
              schema:
                type: string
              description: response signature
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetVirtualPaymentMethodResponseBody'
          description: OK
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          $ref: '#/components/responses/404'
        "408":
          $ref: '#/components/responses/408'
        "500":
          $ref: '#/components/responses/500'
      tags:
      - V1 Virtual Payment Method
      - Virtual Payment Method
      description: Get virtual payment method by id
      summary: Get virtual payment method
  /v1/transactions/{uuid}:
    get:
      security:
      - Bearer: []
      - JwsSignature: []
      - Bearer: []
      - JwsSignature: []
      parameters:
      - $ref: '#/components/parameters/MerchantID'
      - $ref: '#/components/parameters/ProjectID'
      - $ref: '#/components/parameters/TransactionID'
      - $ref: '#/components/parameters/RequestID'
      - $ref: '#/components/parameters/MerchantID'
      - $ref: '#/components/parameters/ProjectID'
      - $ref: '#/components/parameters/TransactionID'
      - $ref: '#/components/parameters/RequestID'
      responses:
        "200":
          headers:
            x-jws-signature:
              schema:
                type: string
              description: Response signature. Refer to [Signature](#tag/Signature) section.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTransactionResponseBody'
          description: OK
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          $ref: '#/components/responses/404'
        "408":
          $ref: '#/components/responses/408'
        "500":
          $ref: '#/components/responses/500'
      tags:
      - V1 Transactions
      - Transactions
      - V1 Transactions
      - Transactions
      description: Retrieve details of transaction and all related operations.
      summary: Get Transaction
  /v1/transactions/{txType}/init:
    post:
      callbacks:
        callback:
          '{project.integrationURL}':
            post:
              summary: Merchant callback
              description: "FinteqHub uses callbacks to notify merchant about the last completed (successfully or not) operation within the initiated transaction. <br/>\nTo check the received callback body integrity, you need verify the signature. \n"
              parameters:
              - $ref: '#/components/parameters/MerchantID'
              - $ref: '#/components/parameters/ProjectID'
              - $ref: '#/components/parameters/RequestID'
              - description: Callback signature. Refer to [Signature](#tag/Signature) section.
                in: header
                name: x-jws-signature
                required: true
                schema:
                  type: string
              - $ref: '#/components/parameters/MerchantID'
              - $ref: '#/components/parameters/ProjectID'
              - $ref: '#/components/parameters/RequestID'
              - description: Callback signature. Refer to [Signature](#tag/Signature) section.
                in: header
                name: x-jws-signature
                required: true
                schema:
                  type: string
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/MerchantCallbackRequestBody'
              responses:
                "201":
                  description: "FinteqHub expects the merchant will respond to callback with HTTP `201 Created` status code.\nOtherwise callback will be resend according to retry mechanism. \n"
      security:
      - Bearer: []
      - JwsSignature: []
      parameters:
      - $ref: '#/components/parameters/MerchantID'
      - $ref: '#/components/parameters/ProjectID'
      - $ref: '#/components/parameters/RequestID'
      - description: |
          Transaction type to be initiated:
          * deposit – transfer from the customer's account to the merchant's account.
          * withdrawal – transfer from the merchant's account to the customer's account.
        in: path
        name: txType
        required: true
        schema:
          $ref: '#/components/schemas/TxType'
      responses:
        "200":
          headers:
            x-jws-signature:
              schema:
                type: string
              description: Response signature. Refer to [Signature](#tag/Signature) section.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InitTransactionV1ResponseBody'
          description: OK
        "401":
          $ref: '#/components/responses/401'
        "400":
          $ref: '#/components/responses/400'
        "403":
          $ref: '#/components/responses/403'
        "404":
          $ref: '#/components/responses/404'
        "408":
          $ref: '#/components/responses/408'
        "500":
          $ref: '#/components/responses/500'
      tags:
      - V1 Transactions
      - Transactions
      description: Initiate a deposit or withdrawal transaction.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InitTransactionV1RequestBody'
        required: true
      summary: Init Transaction
  /v1/transactions/payment-methods:
    post:
      security:
      - Bearer: []
      - JwsSignature: []
      parameters:
      - $ref: '#/components/parameters/MerchantID'
      - $ref: '#/components/parameters/RequestID'
      - $ref: '#/components/parameters/ProjectID'
      - $ref: '#/components/parameters/CustomerAccount'
      - $ref: '#/components/parameters/AcceptEncoding'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetPaymentMethodsV1RequestBody'
        description: "The available payment methods for the customer are idenfified based on the request parameters.\n\nIf the parameters are not provided in the request, then corresponding conditions in routing rules are considered as failed, \ntherefore payment method will not be returned in the response.\n"
      responses:
        "200":
          headers:
            x-jws-signature:
              schema:
                type: string
              description: Response signature. Refer to [Signature](#tag/Signature) section.
            content-encoding:
              name: Content-Encoding
              description: Indicates that the response is compressed with Gzip method.
              schema:
                type: string
                example: gzip
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPaymentMethodsV1ResponseBodyExtended'
          description: OK
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          $ref: '#/components/responses/404'
        "408":
          $ref: '#/components/responses/408'
        "500":
          $ref: '#/components/responses/500'
      tags:
      - V1 Transactions
      - Payment Methods
      description: Get available payment methods for the customer.
      summary: Get Payment Methods
  /v1/transactions/submit-form:
    post:
      security:
      - SID: []
      parameters:
      - $ref: '#/components/parameters/MerchantID'
      - $ref: '#/components/parameters/ProjectID'
      - $ref: '#/components/parameters/RequestID'
      - description: Fingerprint
        in: header
        name: x-fingerprint
        required: true
        schema:
          maxLength: 32
          minLength: 32
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmitTransactionResponseBody'
          description: ok
        "401":
          $ref: '#/components/responses/401'
        "400":
          $ref: '#/components/responses/400'
        "403":
          $ref: '#/components/responses/403'
        "404":
          $ref: '#/components/responses/404'
        "408":
          $ref: '#/components/responses/408'
        "500":
          $ref: '#/components/responses/500'
      tags:
      - V1 Transactions
      - Transactions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmitFormRequestBody'
        required: true
      description: "Submit transaction details. \nRequest is used to transmit card details when `flow:form` is specified.\n"
      summary: Submit Transaction
  /v1/secure/transactions/submit-form:
    post:
      security:
      - SID: []
      parameters:
      - $ref: '#/components/parameters/MerchantID'
      - $ref: '#/components/parameters/ProjectID'
      - $ref: '#/components/parameters/RequestID'
      - description: Fingerprint
        in: header
        name: x-fingerprint
        required: true
        schema:
          maxLength: 32
          minLength: 32
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmitTransactionResponseBody'
          description: ok
        "401":
          $ref: '#/components/responses/401'
        "400":
          $ref: '#/components/responses/400'
        "403":
          $ref: '#/components/responses/403'
        "404":
          $ref: '#/components/responses/404'
        "408":
          $ref: '#/components/responses/408'
        "500":
          $ref: '#/components/responses/500'
      tags:
      - V1 Transactions
      - Transactions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmitFormRequestBody'
        required: true
      description: "Submit transaction details with secured merchantID. \nRequest is used to transmit card details when `flow:form` is specified.\n"
      summary: Submit Transaction With Secured MerchantID
  /v1/cashier/methods:
    post:
      parameters:
      - $ref: '#/components/parameters/RequestID'
      - $ref: '#/components/parameters/AcceptEncoding'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CashierMethodsRequestBody'
        required: true
      responses:
        "200":
          headers:
            content-encoding:
              name: Content-Encoding
              description: Indicates that the response is compressed with Gzip method.
              schema:
                type: string
                example: gzip
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CashierMethodsResponseBody'
          description: OK
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          $ref: '#/components/responses/404'
        "408":
          $ref: '#/components/responses/408'
        "500":
          $ref: '#/components/responses/500'
      tags:
      - Cashier
      description: |
        Get available payment methods, customer accounts, cashier configuration and authentication tokens.

        Uses initToken for initialization and returns:
        - Available payment methods with credentials configuration
        - Saved customer accounts for supported payment methods
        - Cashier configuration from merchant YAML
        - accessToken and refreshToken for further authentication
      summary: Cashier Methods
  /v1/cashier/{txType}/cashier-init:
    post:
      security:
      - Bearer: []
      - JwsSignature: []
      parameters:
      - $ref: '#/components/parameters/MerchantID'
      - $ref: '#/components/parameters/ProjectID'
      - $ref: '#/components/parameters/RequestID'
      - $ref: '#/components/parameters/AcceptEncoding'
      - description: |
          Transaction type to be initiated:
          * deposit – transfer from the customer's account to the merchant's account.
          * withdrawal – transfer from the merchant's account to the customer's account.
        in: path
        name: txType
        required: true
        schema:
          $ref: '#/components/schemas/TxType'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CashierInitTransactionRequestBody'
        required: true
      responses:
        "200":
          headers:
            x-jws-signature:
              schema:
                type: string
              description: Response signature. Refer to [Signature](#tag/Signature) section.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CashierInitTransactionResponseBody'
          description: OK
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          $ref: '#/components/responses/404'
        "408":
          $ref: '#/components/responses/408'
        "500":
          $ref: '#/components/responses/500'
      tags:
      - V1 Transactions
      - Cashier Methods
      description: |
        Initialize a deposit or withdrawal transaction through the Cashier.

        Creates transaction, operation and customer entities on FinteqHub side,
        then initiates request to payment integration.

        Requires accessToken obtained from cashier-methods endpoint.
        Uses cashier flow for transaction processing.
      summary: Cashier Init Transaction
  /v1/cashier/refresh-token:
    post:
      security:
      - Bearer: []
      parameters:
      - $ref: '#/components/parameters/RequestID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequestBody'
        required: true
      responses:
        "200":
          headers:
            x-jws-signature:
              schema:
                type: string
              description: Response signature. Refer to [Signature](#tag/Signature) section.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshTokenResponseBody'
          description: OK
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          $ref: '#/components/responses/404'
        "500":
          $ref: '#/components/responses/500'
      tags:
      - Cashier
      description: |
        Refresh an expired accessToken using a valid refreshToken.

        When accessToken expires during cashier operations, this endpoint
        allows obtaining a new accessToken without requiring full reinitialization.

        RefreshToken has longer TTL (60 minutes) compared to accessToken (5 minutes).
      summary: Refresh Access Token
  /v1/transactions/{txType}/payment-methods:
    get:
      security:
      - Bearer: []
      - JwsSignature: []
      parameters:
      - $ref: '#/components/parameters/TransactionType'
      - $ref: '#/components/parameters/CurrencyCode'
      - $ref: '#/components/parameters/UserCountryCode'
      - $ref: '#/components/parameters/MerchantID'
      - $ref: '#/components/parameters/ProjectID'
      - $ref: '#/components/parameters/RequestID'
      - $ref: '#/components/parameters/AcceptEncoding'
      responses:
        "200":
          headers:
            x-jws-signature:
              schema:
                type: string
              description: Response signature. Refer to [Signature](#tag/Signature) section.
            content-encoding:
              name: Content-Encoding
              description: Indicates that the response is compressed with Gzip
              schema:
                type: string
                example: gzip
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPaymentMethodsV1ResponseBody'
          description: OK
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          $ref: '#/components/responses/404'
        "408":
          $ref: '#/components/responses/408'
        "500":
          $ref: '#/components/responses/500'
      tags:
      - V1 Transactions
      - Payment Methods
      description: |
        Get available payment methods for the customer.

        <font color="red"> DEPRECATED ENDPOINT. </font> Please use [Get payment methods POST](#tag/Seamless-API/paths/~1v1~1transactions~1payment-methods/post) endpoint.
      summary: Get Payment Methods
  /v1/operations/{uuid}:
    post:
      security:
      - SID: []
      parameters:
      - $ref: '#/components/parameters/MerchantID'
      - $ref: '#/components/parameters/ProjectID'
      - $ref: '#/components/parameters/OperationID'
      - $ref: '#/components/parameters/RequestID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationAction'
          description: OK
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          $ref: '#/components/responses/404'
        "408":
          $ref: '#/components/responses/408'
        "500":
          $ref: '#/components/responses/500'
      tags:
      - V1 Operations
      - Operations
      description: |
        Process operation endpoint is used to determine further action in transaction processing.
        Request should be sent:
          * for `flow:form` after init + submit requests,
          * in particular cases for `flow:direct` after init request.
      summary: Process Operation
    get:
      security:
      - Bearer: []
      - JwsSignature: []
      parameters:
      - $ref: '#/components/parameters/MerchantID'
      - $ref: '#/components/parameters/ProjectID'
      - $ref: '#/components/parameters/OperationID'
      - $ref: '#/components/parameters/RequestID'
      responses:
        "200":
          headers:
            x-jws-signature:
              schema:
                type: string
              description: Response signature. Refer to [Signature](#tag/Signature) section.
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOperationResponseBody'
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          $ref: '#/components/responses/404'
        "408":
          $ref: '#/components/responses/408'
        "500":
          $ref: '#/components/responses/500'
      tags:
      - V1 Operations
      - Operations
      description: |
        Retrieve details of operation.

        <font color="red"> DEPRECATED ENDPOINT. </font> Please use [Get Transaction](#tag/Transactions/paths/~1v1~1transactions~1%7Buuid%7D/get) endpoint.
      summary: Get Operation
  /v1/secure/operations/{uuid}:
    post:
      security:
      - SID: []
      parameters:
      - $ref: '#/components/parameters/MerchantID'
      - $ref: '#/components/parameters/ProjectID'
      - $ref: '#/components/parameters/OperationID'
      - $ref: '#/components/parameters/RequestID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationAction'
          description: OK
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          $ref: '#/components/responses/404'
        "408":
          $ref: '#/components/responses/408'
        "500":
          $ref: '#/components/responses/500'
      tags:
      - V1 Operations
      - Operations
      description: |
        Process operation endpoint is used to determine further action in transaction processing.
        Request should be sent:
          * for `flow:form` after init + submit requests,
          * in particular cases for `flow:direct` after init request.
      summary: Process Operation With Secured MerchantID
  /v1/operations:
    get:
      summary: List Operations
      description: |
        Retrieve a list of all operations for a project. <br/>
        The information is returned for the project specified in headers. <br/>
        You can filter the list with query parameters.
      tags:
      - V1 Operations
      - Operations
      security:
      - Bearer: []
      - JwsSignature: []
      parameters:
      - $ref: '#/components/parameters/MerchantID'
      - $ref: '#/components/parameters/RequestID'
      - $ref: '#/components/parameters/ProjectID'
      - $ref: '#/components/parameters/DateFrom'
      - $ref: '#/components/parameters/DateTo'
      - $ref: '#/components/parameters/OpTypes'
      - $ref: '#/components/parameters/TxTypes'
      - $ref: '#/components/parameters/Integrations'
      - $ref: '#/components/parameters/PaymentMethods'
      - $ref: '#/components/parameters/Offset'
      - description: Fingerprint
        in: header
        name: x-fingerprint
        required: false
        schema:
          type: string
          maxLength: 32
          minLength: 32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerchantListOperationsResponseBody'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        408:
          $ref: '#/components/responses/408'
        500:
          $ref: '#/components/responses/500'
  /v1/customers/{uuid}/customer-accounts:
    get:
      security:
      - Bearer: []
      - JwsSignature: []
      parameters:
      - $ref: '#/components/parameters/MerchantID'
      - $ref: '#/components/parameters/ProjectID'
      - $ref: '#/components/parameters/RequestID'
      - $ref: '#/components/parameters/CustomerUUID'
      responses:
        "200":
          headers:
            x-jws-signature:
              schema:
                type: string
              description: Response signature. Refer to [Signature](#tag/Signature) section.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCustomersAccountsResponseBody'
          description: OK
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          $ref: '#/components/responses/404'
        "408":
          $ref: '#/components/responses/408'
        "500":
          $ref: '#/components/responses/500'
      tags:
      - V1 Customer accounts
      - Customer Accounts
      description: Retrieve a list of saved customer accounts of customer.
      summary: List Customer Accounts
  /v1/customers/{uuid}/customer-accounts/{accountUuid}:
    get:
      security:
      - Bearer: []
      - JwsSignature: []
      parameters:
      - $ref: '#/components/parameters/MerchantID'
      - $ref: '#/components/parameters/ProjectID'
      - $ref: '#/components/parameters/RequestID'
      - $ref: '#/components/parameters/CustomerUUID'
      - $ref: '#/components/parameters/CustomerAccountID'
      responses:
        "200":
          headers:
            x-jws-signature:
              schema:
                type: string
              description: Response signature. Refer to [Signature](#tag/Signature) section.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCustomerAccountResponseBody'
          description: OK
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          $ref: '#/components/responses/404'
        "408":
          $ref: '#/components/responses/408'
        "500":
          $ref: '#/components/responses/500'
      tags:
      - V1 Customer accounts
      - Customer Accounts
      description: Retrieve details of customer account.
      summary: Get Customer Account
  /v1/customer-accounts:
    post:
      security:
      - Bearer: []
      - JwsSignature: []
      parameters:
      - $ref: '#/components/parameters/MerchantID'
      - $ref: '#/components/parameters/ProjectID'
      - $ref: '#/components/parameters/RequestID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomerAccountV1RequestBody'
      responses:
        "200":
          headers:
            x-jws-signature:
              schema:
                type: string
              description: Response signature. Refer to [Signature](#tag/Signature) section.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCustomerAccountV1ResponseBody'
          description: OK
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          $ref: '#/components/responses/404'
        "408":
          $ref: '#/components/responses/408'
        "500":
          $ref: '#/components/responses/500'
      tags:
      - V1 Customer accounts
      - Customer Accounts
      description: Create a new customer account.
      summary: Create Customer Account
  /v2/callbacks/by-path/{integrationType}/{paymentMethodType}/{merchantId}/{operationId}:
    post:
      parameters:
      - $ref: '#/components/parameters/PathIntegrationType'
      - $ref: '#/components/parameters/PathPaymentMethodType'
      - $ref: '#/components/parameters/PathMerchantID'
      - $ref: '#/components/parameters/PathOperationID'
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/RawPayload'
          description: OK
        "401":
          $ref: '#/components/responses/401'
        "400":
          $ref: '#/components/responses/400'
        "404":
          $ref: '#/components/responses/404'
        "408":
          $ref: '#/components/responses/408'
        "500":
          $ref: '#/components/responses/500'
      tags:
      - V2 Callbacks
      - Callbacks
      description: External integrations callbacks
      requestBody:
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/RawPayload'
        description: Callback data
        required: true
      summary: v2 callback
    get:
      parameters:
      - $ref: '#/components/parameters/PathIntegrationType'
      - $ref: '#/components/parameters/PathPaymentMethodType'
      - $ref: '#/components/parameters/PathMerchantID'
      - $ref: '#/components/parameters/PathOperationID'
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/RawPayload'
          description: OK
        "401":
          $ref: '#/components/responses/401'
        "400":
          $ref: '#/components/responses/400'
        "404":
          $ref: '#/components/responses/404'
        "408":
          $ref: '#/components/responses/408'
        "500":
          $ref: '#/components/responses/500'
      tags:
      - V2 Callbacks
      - Callbacks
      description: External integrations callbacks
      requestBody:
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/RawPayload'
        description: Callback data
        required: true
      summary: v2 callback
  /v2/callbacks/by-path/{integrationType}/{paymentMethodType}/{merchantId}:
    post:
      parameters:
      - $ref: '#/components/parameters/PathIntegrationType'
      - $ref: '#/components/parameters/PathPaymentMethodType'
      - $ref: '#/components/parameters/PathMerchantID'
      - $ref: '#/components/parameters/QueryOptionalOperationID'
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/RawPayload'
          description: OK
        "401":
          $ref: '#/components/responses/401'
        "400":
          $ref: '#/components/responses/400'
        "404":
          $ref: '#/components/responses/404'
        "408":
          $ref: '#/components/responses/408'
        "500":
          $ref: '#/components/responses/500'
      tags:
      - V2 Callbacks
      - Callbacks
      description: External integrations callbacks
      requestBody:
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/RawPayload'
        description: Callback data
        required: true
      summary: v2 callback
    get:
      parameters:
      - $ref: '#/components/parameters/PathIntegrationType'
      - $ref: '#/components/parameters/PathPaymentMethodType'
      - $ref: '#/components/parameters/PathMerchantID'
      - $ref: '#/components/parameters/QueryOptionalOperationID'
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/RawPayload'
          description: OK
        "401":
          $ref: '#/components/responses/401'
        "400":
          $ref: '#/components/responses/400'
        "404":
          $ref: '#/components/responses/404'
        "408":
          $ref: '#/components/responses/408'
        "500":
          $ref: '#/components/responses/500'
      tags:
      - V2 Callbacks
      - Callbacks
      description: External integrations callbacks
      requestBody:
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/RawPayload'
        description: Callback data
        required: true
      summary: v2 callback
  /v2/callbacks/by-query/{integrationType}/{paymentMethodType}:
    post:
      parameters:
      - $ref: '#/components/parameters/PathIntegrationType'
      - $ref: '#/components/parameters/PathPaymentMethodType'
      - $ref: '#/components/parameters/QueryMerchantID'
      - $ref: '#/components/parameters/QueryOptionalOperationID'
      - $ref: '#/components/parameters/QueryOptionalExtOperationID'
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/RawPayload'
          description: OK
        "401":
          $ref: '#/components/responses/401'
        "400":
          $ref: '#/components/responses/400'
        "404":
          $ref: '#/components/responses/404'
        "408":
          $ref: '#/components/responses/408'
        "500":
          $ref: '#/components/responses/500'
      tags:
      - V2 Callbacks
      - Callbacks
      description: External integrations callbacks
      requestBody:
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/RawPayload'
        description: Callback data
        required: true
      summary: v2 callback
    get:
      parameters:
      - $ref: '#/components/parameters/PathIntegrationType'
      - $ref: '#/components/parameters/PathPaymentMethodType'
      - $ref: '#/components/parameters/QueryMerchantID'
      - $ref: '#/components/parameters/QueryOptionalOperationID'
      - $ref: '#/components/parameters/QueryOptionalExtOperationID'
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/RawPayload'
          description: OK
        "401":
          $ref: '#/components/responses/401'
        "400":
          $ref: '#/components/responses/400'
        "404":
          $ref: '#/components/responses/404'
        "408":
          $ref: '#/components/responses/408'
        "500":
          $ref: '#/components/responses/500'
      tags:
      - V2 Callbacks
      - Callbacks
      description: External integrations callbacks
      requestBody:
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/RawPayload'
        description: Callback data
        required: true
      summary: v2 callback
  /v2/callbacks/by-query/{integrationType}:
    post:
      parameters:
      - $ref: '#/components/parameters/PathIntegrationType'
      - $ref: '#/components/parameters/QueryMerchantID'
      - $ref: '#/components/parameters/QueryOptionalOperationID'
      - $ref: '#/components/parameters/QueryOptionalExtOperationID'
      - $ref: '#/components/parameters/QueryOptionalProjectTokenID'
      - $ref: '#/components/parameters/QueryOptionalTerminalID'
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/RawPayload'
          description: OK
        "401":
          $ref: '#/components/responses/401'
        "400":
          $ref: '#/components/responses/400'
        "404":
          $ref: '#/components/responses/404'
        "408":
          $ref: '#/components/responses/408'
        "500":
          $ref: '#/components/responses/500'
      tags:
      - V2 Callbacks
      - Callbacks
      description: External integrations callbacks
      requestBody:
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/RawPayload'
        description: Callback data
        required: true
      summary: v2 callback
    get:
      parameters:
      - $ref: '#/components/parameters/PathIntegrationType'
      - $ref: '#/components/parameters/QueryMerchantID'
      - $ref: '#/components/parameters/QueryOptionalOperationID'
      - $ref: '#/components/parameters/QueryOptionalExtOperationID'
      - $ref: '#/components/parameters/QueryOptionalProjectTokenID'
      - $ref: '#/components/parameters/QueryOptionalTerminalID'
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/RawPayload'
          description: OK
        "401":
          $ref: '#/components/responses/401'
        "400":
          $ref: '#/components/responses/400'
        "404":
          $ref: '#/components/responses/404'
        "408":
          $ref: '#/components/responses/408'
        "500":
          $ref: '#/components/responses/500'
      tags:
      - V2 Callbacks
      - Callbacks
      description: External integrations callbacks
      requestBody:
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/RawPayload'
        description: Callback data
        required: true
      summary: v2 callback
  /v2/secure/callbacks/by-path/{integrationType}/{paymentMethodType}/{merchantId}/{operationId}:
    post:
      parameters:
      - $ref: '#/components/parameters/PathIntegrationType'
      - $ref: '#/components/parameters/PathPaymentMethodType'
      - $ref: '#/components/parameters/PathMerchantID'
      - $ref: '#/components/parameters/PathOperationID'
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/RawPayload'
          description: OK
        "401":
          $ref: '#/components/responses/401'
        "400":
          $ref: '#/components/responses/400'
        "404":
          $ref: '#/components/responses/404'
        "408":
          $ref: '#/components/responses/408'
        "500":
          $ref: '#/components/responses/500'
      tags:
      - V2 Callbacks
      - Callbacks
      description: External integrations callbacks
      requestBody:
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/RawPayload'
        description: Callback data
        required: true
      summary: v2 callback
    get:
      parameters:
      - $ref: '#/components/parameters/PathIntegrationType'
      - $ref: '#/components/parameters/PathPaymentMethodType'
      - $ref: '#/components/parameters/PathMerchantID'
      - $ref: '#/components/parameters/PathOperationID'
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/RawPayload'
          description: OK
        "401":
          $ref: '#/components/responses/401'
        "400":
          $ref: '#/components/responses/400'
        "404":
          $ref: '#/components/responses/404'
        "408":
          $ref: '#/components/responses/408'
        "500":
          $ref: '#/components/responses/500'
      tags:
      - V2 Callbacks
      - Callbacks
      description: External integrations callbacks
      requestBody:
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/RawPayload'
        description: Callback data
        required: true
      summary: v2 callback
  /v2/secure/callbacks/by-path/{integrationType}/{paymentMethodType}/{merchantId}:
    post:
      parameters:
      - $ref: '#/components/parameters/PathIntegrationType'
      - $ref: '#/components/parameters/PathPaymentMethodType'
      - $ref: '#/components/parameters/PathMerchantID'
      - $ref: '#/components/parameters/QueryOptionalOperationID'
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/RawPayload'
          description: OK
        "401":
          $ref: '#/components/responses/401'
        "400":
          $ref: '#/components/responses/400'
        "404":
          $ref: '#/components/responses/404'
        "408":
          $ref: '#/components/responses/408'
        "500":
          $ref: '#/components/responses/500'
      tags:
      - V2 Callbacks
      - Callbacks
      description: External integrations callbacks
      requestBody:
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/RawPayload'
        description: Callback data
        required: true
      summary: v2 callback
    get:
      parameters:
      - $ref: '#/components/parameters/PathIntegrationType'
      - $ref: '#/components/parameters/PathPaymentMethodType'
      - $ref: '#/components/parameters/PathMerchantID'
      - $ref: '#/components/parameters/QueryOptionalOperationID'
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/RawPayload'
          description: OK
        "401":
          $ref: '#/components/responses/401'
        "400":
          $ref: '#/components/responses/400'
        "404":
          $ref: '#/components/responses/404'
        "408":
          $ref: '#/components/responses/408'
        "500":
          $ref: '#/components/responses/500'
      tags:
      - V2 Callbacks
      - Callbacks
      description: External integrations callbacks
      requestBody:
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/RawPayload'
        description: Callback data
        required: true
      summary: v2 callback
  /v2/secure/callbacks/by-query/{integrationType}/{paymentMethodType}:
    post:
      parameters:
      - $ref: '#/components/parameters/PathIntegrationType'
      - $ref: '#/components/parameters/PathPaymentMethodType'
      - $ref: '#/components/parameters/QueryMerchantID'
      - $ref: '#/components/parameters/QueryOptionalOperationID'
      - $ref: '#/components/parameters/QueryOptionalExtOperationID'
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/RawPayload'
          description: OK
        "401":
          $ref: '#/components/responses/401'
        "400":
          $ref: '#/components/responses/400'
        "404":
          $ref: '#/components/responses/404'
        "408":
          $ref: '#/components/responses/408'
        "500":
          $ref: '#/components/responses/500'
      tags:
      - V2 Callbacks
      - Callbacks
      description: External integrations callbacks
      requestBody:
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/RawPayload'
        description: Callback data
        required: true
      summary: v2 callback
    get:
      parameters:
      - $ref: '#/components/parameters/PathIntegrationType'
      - $ref: '#/components/parameters/PathPaymentMethodType'
      - $ref: '#/components/parameters/QueryMerchantID'
      - $ref: '#/components/parameters/QueryOptionalOperationID'
      - $ref: '#/components/parameters/QueryOptionalExtOperationID'
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/RawPayload'
          description: OK
        "401":
          $ref: '#/components/responses/401'
        "400":
          $ref: '#/components/responses/400'
        "404":
          $ref: '#/components/responses/404'
        "408":
          $ref: '#/components/responses/408'
        "500":
          $ref: '#/components/responses/500'
      tags:
      - V2 Callbacks
      - Callbacks
      description: External integrations callbacks
      requestBody:
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/RawPayload'
        description: Callback data
        required: true
      summary: v2 callback
  /v2/secure/callbacks/by-query/{integrationType}:
    post:
      parameters:
      - $ref: '#/components/parameters/PathIntegrationType'
      - $ref: '#/components/parameters/QueryMerchantID'
      - $ref: '#/components/parameters/QueryOptionalOperationID'
      - $ref: '#/components/parameters/QueryOptionalExtOperationID'
      - $ref: '#/components/parameters/QueryOptionalProjectTokenID'
      - $ref: '#/components/parameters/QueryOptionalTerminalID'
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/RawPayload'
          description: OK
        "401":
          $ref: '#/components/responses/401'
        "400":
          $ref: '#/components/responses/400'
        "404":
          $ref: '#/components/responses/404'
        "408":
          $ref: '#/components/responses/408'
        "500":
          $ref: '#/components/responses/500'
      tags:
      - V2 Callbacks
      - Callbacks
      description: External integrations callbacks
      requestBody:
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/RawPayload'
        description: Callback data
        required: true
      summary: v2 callback
    get:
      parameters:
      - $ref: '#/components/parameters/PathIntegrationType'
      - $ref: '#/components/parameters/QueryMerchantID'
      - $ref: '#/components/parameters/QueryOptionalOperationID'
      - $ref: '#/components/parameters/QueryOptionalExtOperationID'
      - $ref: '#/components/parameters/QueryOptionalProjectTokenID'
      - $ref: '#/components/parameters/QueryOptionalTerminalID'
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/RawPayload'
          description: OK
        "401":
          $ref: '#/components/responses/401'
        "400":
          $ref: '#/components/responses/400'
        "404":
          $ref: '#/components/responses/404'
        "408":
          $ref: '#/components/responses/408'
        "500":
          $ref: '#/components/responses/500'
      tags:
      - V2 Callbacks
      - Callbacks
      description: External integrations callbacks
      requestBody:
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/RawPayload'
        description: Callback data
        required: true
      summary: v2 callback
  /v2/callbacks/{integrationType}/{paymentMethodType}:
    post:
      parameters:
      - $ref: '#/components/parameters/PathIntegrationType'
      - $ref: '#/components/parameters/PathPaymentMethodType'
      - $ref: '#/components/parameters/QueryMerchantID'
      - $ref: '#/components/parameters/QueryOptionalOperationID'
      - $ref: '#/components/parameters/QueryOptionalExtOperationID'
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/RawPayload'
          description: OK
        "401":
          $ref: '#/components/responses/401'
        "400":
          $ref: '#/components/responses/400'
        "404":
          $ref: '#/components/responses/404'
        "408":
          $ref: '#/components/responses/408'
        "500":
          $ref: '#/components/responses/500'
      tags:
      - V2 Callbacks
      - Callbacks
      description: External integrations callbacks
      requestBody:
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/RawPayload'
        description: Callback data
        required: true
      summary: v2 callback
    get:
      parameters:
      - $ref: '#/components/parameters/PathIntegrationType'
      - $ref: '#/components/parameters/PathPaymentMethodType'
      - $ref: '#/components/parameters/QueryMerchantID'
      - $ref: '#/components/parameters/QueryOptionalOperationID'
      - $ref: '#/components/parameters/QueryOptionalExtOperationID'
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/RawPayload'
          description: OK
        "401":
          $ref: '#/components/responses/401'
        "400":
          $ref: '#/components/responses/400'
        "404":
          $ref: '#/components/responses/404'
        "408":
          $ref: '#/components/responses/408'
        "500":
          $ref: '#/components/responses/500'
      tags:
      - V2 Callbacks
      - Callbacks
      description: External integrations callbacks
      requestBody:
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/RawPayload'
        description: Callback data
        required: true
      summary: v2 callback
  /v2/integration-api/{integrationType}/verifyuser:
    post:
      parameters:
      - $ref: '#/components/parameters/QueryMerchantID'
      - description: Integration type
        in: path
        name: integrationType
        required: true
        schema:
          $ref: '#/components/schemas/ReversedIntegrationType'
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/RawPayload'
          description: OK
        "401":
          $ref: '#/components/responses/401'
        "400":
          $ref: '#/components/responses/400'
        "404":
          $ref: '#/components/responses/404'
        "408":
          $ref: '#/components/responses/408'
        "500":
          $ref: '#/components/responses/500'
      tags:
      - V2 Integration API
      - PaymentIQ
      requestBody:
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/RawPayload'
        description: Integration payload
        required: true
      summary: Verify user
      description: Verify user
  /v2/integration-api/{integrationType}/authorize:
    post:
      parameters:
      - $ref: '#/components/parameters/QueryMerchantID'
      - description: Integration type
        in: path
        name: integrationType
        required: true
        schema:
          $ref: '#/components/schemas/ReversedIntegrationType'
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/RawPayload'
          description: OK
        "401":
          $ref: '#/components/responses/401'
        "400":
          $ref: '#/components/responses/400'
        "404":
          $ref: '#/components/responses/404'
        "408":
          $ref: '#/components/responses/408'
        "500":
          $ref: '#/components/responses/500'
      tags:
      - V2 Integration API
      - PaymentIQ
      requestBody:
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/RawPayload'
        description: Integration payload
        required: true
      summary: Authorize payment
      description: Authorize payment
  /v2/integration-api/{integrationType}/transfer:
    post:
      parameters:
      - $ref: '#/components/parameters/QueryMerchantID'
      - description: Integration type
        in: path
        name: integrationType
        required: true
        schema:
          $ref: '#/components/schemas/ReversedIntegrationType'
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/RawPayload'
          description: OK
        "401":
          $ref: '#/components/responses/401'
        "400":
          $ref: '#/components/responses/400'
        "404":
          $ref: '#/components/responses/404'
        "408":
          $ref: '#/components/responses/408'
        "500":
          $ref: '#/components/responses/500'
      tags:
      - V2 Integration API
      - PaymentIQ
      requestBody:
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/RawPayload'
        description: Integration payload
        required: true
      summary: Transfer payment
      description: Transfer payment
  /v2/integration-api/{integrationType}/cancel:
    post:
      parameters:
      - $ref: '#/components/parameters/QueryMerchantID'
      - description: Integration type
        in: path
        name: integrationType
        required: true
        schema:
          $ref: '#/components/schemas/ReversedIntegrationType'
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/RawPayload'
          description: OK
        "401":
          $ref: '#/components/responses/401'
        "400":
          $ref: '#/components/responses/400'
        "404":
          $ref: '#/components/responses/404'
        "408":
          $ref: '#/components/responses/408'
        "500":
          $ref: '#/components/responses/500'
      tags:
      - V2 Integration API
      - PaymentIQ
      requestBody:
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/RawPayload'
        description: Integration payload
        required: true
      summary: Cancel payment
      description: Cancel payment
  /v2/integration-api/{integrationType}/callback:
    post:
      parameters:
      - $ref: '#/components/parameters/QueryMerchantID'
      - description: Integration type
        in: path
        name: integrationType
        required: true
        schema:
          $ref: '#/components/schemas/ReversedIntegrationType'
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/RawPayload'
          description: OK
        "401":
          $ref: '#/components/responses/401'
        "400":
          $ref: '#/components/responses/400'
        "404":
          $ref: '#/components/responses/404'
        "408":
          $ref: '#/components/responses/408'
        "500":
          $ref: '#/components/responses/500'
      tags:
      - V2 Integration API
      - Volt
      requestBody:
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/RawPayload'
        description: Integration payload
        required: true
      summary: Process callback
      description: Process callback
  /v2/transactions/{txType}/payment-methods:
    get:
      security:
      - Bearer: []
      - JwsSignature: []
      parameters:
      - $ref: '#/components/parameters/Currency'
      - $ref: '#/components/parameters/UserCountry'
      - $ref: '#/components/parameters/MerchantID'
      - $ref: '#/components/parameters/ProjectID'
      - $ref: '#/components/parameters/RequestID'
      - description: Transaction type
        in: path
        name: txType
        required: true
        schema:
          $ref: '#/components/schemas/TxType'
      responses:
        "200":
          headers:
            x-jws-signature:
              schema:
                type: string
              description: Response signature. Refer to [Signature](#tag/Signature) section.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPaymentMethodsResponseBody'
          description: OK
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          $ref: '#/components/responses/404'
        "408":
          $ref: '#/components/responses/408'
        "500":
          $ref: '#/components/responses/500'
      tags:
      - V2 Transactions
      - Payment Methods
      description: |
        Get available payment methods for the customer.

        <font color="red"> DEPRECATED ENDPOINT. </font> Please use [Get payment methods POST](#tag/Seamless-API/paths/~1v1~1transactions~1payment-methods/post) endpoint.
      summary: Get Payment Methods V2
  /v2/transactions/{txType}/init:
    post:
      callbacks:
        callback:
          '{project.integrationURL}':
            post:
              description: "Callbacks from FinteqHub to the merchant.                                                   \n\nThe requested URL has to be set over the backoffice project settings.\n\nCallbacks are performed when the operation reaches the following statuses: `succeeded `, `failed `, `cancelled`, and `inconsistent `.\n\nFinteqHub expects the callback will reach a `201` status code when be processed by the merchant, otherwise, the callback will be sent again in the order of summing progression by the formula - [`sum n*10sec, n=1 up to 100 attempts`](https://www.wolframalpha.com/input/?i=sum+n*10%2C+n%3D1+to+100) but no more than `3min`.\n\nTo check the received callback body integrity, you need to follow these steps:\n\n- decode the JWT signature `x-jws-signature`: The JWT is usually sent as a string that is base64 encoded. You can decode this string to retrieve the header, payload, and signature.\n- extract JWT header and payload: The header contains information about how the JWT is encoded and the signature algorithm used. The payload contains the claims, such as \"checksum\" and \"version\".\n- verify the signature: You can verify the signature using the signature algorithm specified in the header and the secret key associated with the `project token` used to sign the JWT.\n- validate the claims: After verifying the signature, you can validate the claims in the payload, such as checking if the \"version\" is equal to 1.0 (for sha256 checksum hashing function) and the \"checksum\" matches the hash of the request body.\n\nIf the signature verification and claim validation are successful, you can trust that the JWT has not been tampered with and came from a trusted source.\n"
              parameters:
              - $ref: '#/components/parameters/MerchantID'
              - $ref: '#/components/parameters/ProjectID'
              - $ref: '#/components/parameters/RequestID'
              - description: JWS signature is a property calculated similarly to the initiation request and corresponds to the callback body.
                in: header
                name: x-jws-signature
                required: true
                schema:
                  type: string
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/MerchantCallbackRequestBody'
              responses:
                "201":
                  x-summary: |
                    FinteqHub expects the callback will reach a `201` status code when be processed by the merchant, otherwise, the callback will be sent again in the order of summing progression by the formula - [`sum n*10sec, n=1 up to 100 attempts`](https://www.wolframalpha.com/input/?i=sum+n*10%2C+n%3D1+to+100) but no more than `3min`.
      security:
      - Bearer: []
      - JwsSignature: []
      parameters:
      - $ref: '#/components/parameters/MerchantID'
      - $ref: '#/components/parameters/ProjectID'
      - $ref: '#/components/parameters/RequestID'
      - description: Fingerprint
        in: header
        name: x-fingerprint
        required: false
        schema:
          maxLength: 32
          minLength: 32
          type: string
      - description: Transaction type
        in: path
        name: txType
        required: true
        schema:
          $ref: '#/components/schemas/TxType'
      responses:
        "200":
          headers:
            x-jws-signature:
              schema:
                type: string
              description: Response signature. Refer to [Signature](#tag/Signature) section.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InitTransactionV2ResponseBody'
          description: OK
        "401":
          $ref: '#/components/responses/401'
        "400":
          $ref: '#/components/responses/400'
        "403":
          $ref: '#/components/responses/403'
        "404":
          $ref: '#/components/responses/404'
        "408":
          $ref: '#/components/responses/408'
        "500":
          $ref: '#/components/responses/500'
      tags:
      - V2 Transactions
      - Transactions
      description: |
        ## Init Transaction
        <font color="red"> DEPRECATED ENDPOINT. </font> Please use [Init transaction v1](#tag/Seamless-API/paths/~1v1~1transactions~1%7BtxType%7D~1init/post) endpoint.
        ### Transaction type (txType, see [Value object "Transaction_type"](https://confluence.softswiss.com/pages/viewpage.action?pageId=69926970))
          * **Deposit(PayIn)** - uses for payment acceptance
          * **Withdrawal(PayOut)** - uses to make payouts for NeosurfWallet, EcopayzVoucher, etc.(see other in operation.credentials schema).
              Need to use one of credentials schema to make this. Credentials type should correspond the payment method set in the request.

        ### IntegrationType and PaymentMethodType
          If you use only paymentMethodType only, backend will pick the first suitable terminal from list which will be received after  evaluating scenarios.</br>
        But if you want to use a specific integration for a specific paymentMethodType, it is required to set the integrationType in the request. You make sure that selected terminal is of requested integrationType and that is supports requested paymentMethodType.</br>
        To see what options are avaialbe for a specific project, you can send ***'/v2/transactions/{txType}/payment-methods'*** request which will return a list payment methods grouped by integration. Also, you can see all methods here: [Value object "Payment_methods"](https://confluence.softswiss.com/pages/viewpage.action?pageId=84008418)

        ### Customer
          Finteqhub provides the functionality of a customer storage. In order for it to work you need to send customer id. You can also send other information about your customer (see fields in customer schema)</br>
          If you send a new customer id for the first time the system will create a new record in the storage. After that point, sending new information about customer will update record in said storage.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InitTransactionV2RequestBody'
        description: Transaction data
        required: true
      summary: Init Transaction V2
tags:
- name: Cashier
- name: Transactions
- name: Operations
- name: Payment Methods
- name: Callbacks
- name: PaymentIQ
- name: Volt
- name: Sessions
- name: Customer Accounts
  description: Customer Accounts functionality enables merchant customers to save credentials once the transaction has been processed successfully and use them for further transactions. As soon as a customer account is created it becomes available to be retrieved over the [list](#tag/Customer-Accounts/paths/~1v1~1customers~1%7Buuid%7D~1customer-accounts/get)/[get](#tag/Customer-Accounts/paths/~1v1~1customers~1%7Buuid%7D~1customer-accounts~1%7BaccountUuid%7D/get) customer accounts endpoints and could be used passed to the [initTransaction](#tag/Seamless-API/paths/~1v3~1transactions~1%7BtxType%7D~1init/post) request instead of credentials.
x-tagGroups:
- name: Cashier
  tags:
  - Cashier
- name: Transactions
  tags:
  - Transactions
- name: Customer Accounts
  tags:
  - Customer Accounts
- name: Operations
  tags:
  - Operations
- name: Payment Methods
  tags:
  - Payment Methods
- name: Callbacks
  tags:
  - Callbacks
- name: PaymentIQ
  tags:
  - PaymentIQ
- name: Volt
  tags:
  - Volt
- name: Sessions
  tags:
  - Sessions
components:
  schemas:
    SubmitFormRequestBody:
      properties:
        session:
          $ref: '#/components/schemas/SessionV1'
        customerAccountId:
          description: "Unique identifier of customer account in FinteqHub. \nIf `customerAccountId` provided, the parameters in operation credentials marked as `customerAccountPrefillable:true`\nshould not be included in request, as the values will be taken from saved customer account data.\n"
          $ref: '#/components/schemas/NullULID'
        credentials:
          $ref: '#/components/schemas/CredentialsV1'
        paymentMethod:
          description: |
            **Note**, currently only `card-acquirer` payment method is supported.
          $ref: '#/components/schemas/PaymentMethodType'
        transactionType:
          $ref: '#/components/schemas/TxType'
      required:
      - paymentMethod
      type: object
    OperationType:
      $ref: lib/fbk/contract/bookkeeping/generated.yml#/types/operationType
    PaymentMethodType:
      $ref: lib/fbk/contract/bookkeeping/generated.yml#/types/paymentMethodType
    AdjustmentType:
      $ref: lib/fbk/contract/bookkeeping/generated.yml#/types/adjustmentType
    IntegrationType:
      $ref: lib/fbk/contract/bookkeeping/generated.yml#/types/integrationType
    ReversedIntegrationType:
      $ref: lib/fbk/contract/bookkeeping/generated.yml#/types/reversedIntegrationType
    Customer:
      description: "Customer's information.\nFinteqHub automatically creates a new customer if no existing customer is found in the system with the provided `id`.\nIf the customer already exists, FinteqHub will update their information with the details provided in request.\n\nInformation from this object is not transmitted to the payment integration, it is only shown in the FinteqHub \nBackoffice for reference.\n"
      properties:
        id:
          example: c41fed51-7b1d-4b8c-89f3-101e26e825f0
          type: string
          maxLength: 255
          description: Unique identifier of customer in the merchant's platform.
          x-go-string-trimmable: true
        name:
          example: John Doe
          type: string
          maxLength: 255
          description: Customer's full name.
          x-go-string-trimmable: true
        birthDate:
          type: string
          description: Customer's date of birth.
          format: date
          example: "1987-03-22"
          x-go-omitempty: true
        email:
          description: Customer's email address.
          $ref: '#/components/schemas/Email'
        phoneCountryCode:
          type: string
          example: "48"
          description: Customer's phone country code. Required if `phoneNumber` is provided.
        phoneNumber:
          type: string
          example: "123456789"
          description: Customer's phone number without country code. In E.164 format.
        countryCode:
          description: Customer's country code.
          $ref: '#/components/schemas/Country'
        metadata:
          type: object
          example:
            trusted: true
            tag: vip
          description: |
            Merchant's custom parameters describing the customer. We recommend to use metadata for sending customer groups, tags,
            trusted level etc. You can later use these values to configure routing rules.
          x-go-type: pgw.dev/lib/fbk/types/jewson.Object
      type: object
      required:
      - id
    CustomerV2:
      properties:
        id:
          example: c41fed51-7b1d-4b8c-89f3-101e26e825f0
          type: string
          maxLength: 255
          x-go-string-trimmable: true
        name:
          example: name
          type: string
          maxLength: 255
          description: Required if customer object is provided.
          x-go-string-trimmable: true
        email:
          type: string
          format: email
          maxLength: 200
        phoneNumber:
          type: string
          maxLength: 50
        birthDate:
          example: "2020-12-08"
          type: string
          nullable: true
        country:
          $ref: '#/components/schemas/Country'
        billingAddress:
          $ref: '#/components/schemas/CustomerBillingAddress'
        metadata:
          type: object
          x-go-type: pgw.dev/lib/fbk/types/jewson.Object
      type: object
      x-go-pointer: true
    PaymentMethodsCustomer:
      type: object
      description: "Customer's information.\nYou can provide only `id` parameter, and FinteqHub will attempt to retrieve the remaining customer information from the database. \nHowever, any additional request parameters will take precedence over the database values.\n"
      properties:
        id:
          example: c41fed51-7b1d-4b8c-89f3-101e26e825f0
          type: string
          maxLength: 255
          description: Unique identifier of customer in the merchant's platform.
          x-go-string-trimmable: true
        countryCode:
          description: Customer's country code.
          $ref: '#/components/schemas/Country'
        metadata:
          type: object
          example:
            trusted: true
            tag: vip
          description: |
            Merchant's custom parameters describing the customer. We recommend to use metadata for sending customer groups, tags,
            trusted level etc. You can later use these values to configure routing rules.
          x-go-type: pgw.dev/lib/fbk/types/jewson.Object
    CreateCustomerAccountCustomer:
      type: object
      description: "Customer's information.\nYou can provide only `id` parameter, and FinteqHub will attempt to retrieve the remaining customer information from the database. \nHowever, any additional request parameters will take precedence over the database values.\n"
      properties:
        id:
          example: c41fed51-7b1d-4b8c-89f3-101e26e825f0
          type: string
          maxLength: 255
          description: Unique identifier of customer in the merchant's platform.
          x-go-string-trimmable: true
        countryCode:
          description: Customer's country code.
          $ref: '#/components/schemas/Country'
        metadata:
          type: object
          example:
            trusted: true
            tag: vip
          description: |
            Merchant's custom parameters describing the customer. We recommend to use metadata for sending customer groups, tags,
            trusted level etc. You can later use these values to configure routing rules.
          x-go-type: pgw.dev/lib/fbk/types/jewson.Object
    AdjustmentDetails:
      type: object
      properties:
        value:
          type: string
          example: "100.00"
          description: Allowed adjustment value.
          x-go-type: github.com/shopspring/decimal.Decimal
        type:
          $ref: '#/components/schemas/AdjustmentType'
      x-go-type: pgw.dev/lib/fbk/contract/bookkeeping.AdjustmentDetails
    CustomerBillingAddress:
      type: object
      properties:
        line1:
          type: string
        line2:
          type: string
        city:
          type: string
        state:
          type: string
        countryCode:
          $ref: '#/components/schemas/Country'
        phone:
          type: string
        postalCode:
          type: string
    Flow:
      $ref: lib/fbk/contract/bookkeeping/generated.yml#/types/flowType
    GetOperationResponseBody:
      properties:
        operation:
          $ref: '#/components/schemas/Operation'
        operationLogs:
          description: |
            Operation logs. Contains information about events made on operaton:
            * `status_changed` – operation status has changed.
            * `redirect_urls_selected` – operation is created and redirect URLs are specified from the request or project details;
            * `redirect_requested` – redirect customer to the link provided by integration and/or to sucess(fail) URL;
            * `fallback` – new terminal was selected for processing due to soft decline occurred on previously selected terminal. Log metadata contains `integration` and `terminalId` that are failed in operation processing and `reason` specifying why fallback has started;
            * `form_submission_requested` – payment form was provided and waiting to be submitted;
            * `payment_instrument_updated` – payment instrument of the operation is changed;
            * `wait_requested` – wait time is specified to clarify further action in operation processing;
            * `conversion_applied` – currency conversion is applied on operation;
            * `round_applied` – operation amount was rounded to meet ISO or integration's requirements.
          items:
            $ref: '#/components/schemas/OperationLog'
          type: array
        communicationLogs:
          type: array
          description: "Communication logs. \nContains information about communications made during operation processing between merchant - FinteqHub and FinteqHub - integration.\n"
          items:
            $ref: '#/components/schemas/CommunicationLogGroup'
      type: object
    GetTransactionResponseBody:
      properties:
        operations:
          description: All operations related to transaction.
          items:
            $ref: '#/components/schemas/OperationExtended'
          type: array
        transaction:
          $ref: '#/components/schemas/Transaction'
      type: object
    InitTransactionV2ResponseBody:
      properties:
        sessionId:
          type: string
          x-go-omitempty: true
        operationId:
          $ref: '#/components/schemas/ULID'
        transactionId:
          $ref: '#/components/schemas/ULID'
        url:
          example: http://psp-emu.dckr/v1/go/1c6e10a34a7abeb28615ef8a421b9f13d69044ce2f4367429040eb8a074d6100
          type: string
          format: uri
          x-go-omitempty: true
        error:
          type: string
          x-go-omitempty: true
      required:
      - operationId
      - transactionId
      type: object
    InitTransactionV1ResponseBody:
      properties:
        sessionId:
          type: string
          x-go-omitempty: true
          description: "Unique identifier of customer's session assigned by FinteqHub. \nThis value may be used in further requests.\n"
        operationId:
          description: Unique identifier of operation assigned by FinteqHub.
          $ref: '#/components/schemas/ULID'
        transactionId:
          description: Unique identifier of transaction assigned by FinteqHub.
          $ref: '#/components/schemas/ULID'
        customerId:
          description: Unique identifier of customer assigned by FinteqHub.
          $ref: '#/components/schemas/ULID'
        url:
          example: http://psp-emu.dckr/v1/go/1c6e10a34a7abeb28615ef8a421b9f13d69044ce2f4367429040eb8a074d6100
          type: string
          format: uri
          x-go-omitempty: true
          description: "URL for customer redirect to continue transaction processing: \n* for `flow:direct` this is integration's payment page URL, \n* for `flow:form` this is the FinteqHub payment form URL.\n\nPresented only in synchronous processing flow. You can use any HTTP method (GET or POST) to open the link.\n"
        error:
          type: string
          x-go-omitempty: true
          description: "Operation decline reason. \nMight be internal error message (e.g. terminal is not found) or error message received form integration.\n"
      required:
      - operationId
      - transactionId
      type: object
    SubmitTransactionResponseBody:
      properties:
        sessionId:
          type: string
          example: d8c60791-7301-441c-98e8-5bea9a162d9b
          description: "Unique identifier of customer's session assigned by FinteqHub. \nThis value may be used in further requests.\n"
          x-go-omitempty: true
        operationId:
          description: Unique identifier of operation assigned by FinteqHub.
          $ref: '#/components/schemas/ULID'
        transactionId:
          description: Unique identifier of transaction assigned by FinteqHub.
          $ref: '#/components/schemas/ULID'
        error:
          type: string
          x-go-omitempty: true
          description: "Operation decline reason. \nMight be internal error message (e.g. terminal is not found) or error message received form integration.\n"
      required:
      - operationId
      - transactionId
      type: object
    MerchantCallbackTransactionObject:
      properties:
        id:
          description: Unique identifier of transaction assigned by FinteqHub.
          $ref: '#/components/schemas/ULID'
        merchantTransactionId:
          type: string
          description: Unique identifier of transaction in the merchant's platform.
        type:
          $ref: lib/fbk/contract/bookkeeping/generated.yml#/types/transactionType
        status:
          $ref: lib/fbk/contract/bookkeeping/generated.yml#/types/transactionStatus
      required:
      - id
      - merchantTransactionId
      - type
      - status
      type: object
    MerchantCallbackOperationObject:
      properties:
        id:
          description: Unique identifier of operation assigned by FinteqHub.
          $ref: '#/components/schemas/ULID'
        projectId:
          description: Unique identifier of project in FinteqHub for which transaction is initiated.
          $ref: '#/components/schemas/ULID'
        merchantOperationId:
          type: string
          description: Unique identifier of operation in the merchant's platform.
        integrationOperationId:
          type: string
          example: "123456789"
          description: Uniqie identifier of operation in payment integration.
        integrationStatusCode:
          type: string
          example: CANCELLED
          description: "Status (status code / message / error code) of operation received form payment integration. \nValue is updated every time, when a new status form integration is retrieved.\n"
        type:
          $ref: '#/components/schemas/OperationType'
        status:
          $ref: '#/components/schemas/OperationStatus'
        paymentInstrument:
          type: array
          description: Final payment provider(s) or payment method that is used by integration for transaction processing.
          items:
            type: string
            example: AstroPay Wallet
      required:
      - id
      - projectId
      - merchantOperationId
      - integrationOperationId
      - integrationStatusCode
      - type
      - status
      type: object
    MerchantCallbackCustomerAccount:
      type: object
      properties:
        id:
          description: Unique identifier of customer account assigned by FinteqHub.
          $ref: '#/components/schemas/ULID'
        integrationAccountId:
          type: string
          example: 424242******4242
          description: Unique identifier of customer account in payment integration. Might be a card number, IBAN, wallet etc.
        customerId:
          description: Unique identifier of customer in FinteqHub who owns the account.
          $ref: '#/components/schemas/ULID'
        paymentMethod:
          description: Payment method associated with the customer account.
          $ref: '#/components/schemas/PaymentMethodType'
        holderName:
          type: string
          example: John Doe
          description: Full name of the customer account holder.
      required:
      - id
      - integrationAccountId
      - customerId
      - paymentMethod
    MerchantCallbackRequestBody:
      properties:
        transaction:
          description: Transaction's details.
          $ref: '#/components/schemas/MerchantCallbackTransactionObject'
        operation:
          description: Operation's details. Deprecated, refer to `operations` array.
          $ref: '#/components/schemas/MerchantCallbackOperationObject'
        operations:
          type: array
          description: All operations related to transaction.
          items:
            $ref: '#/components/schemas/MerchantCallbackOperationObject'
        customerAccount:
          description: Customer account details. Included in callback if customer account is created or used during transaction processing.
          $ref: '#/components/schemas/MerchantCallbackCustomerAccount'
      required:
      - transaction
      - operation
      - operations
      type: object
    InitTransactionV2RequestBody:
      properties:
        customer:
          $ref: '#/components/schemas/CustomerV2'
        customerBrowserSession:
          $ref: '#/components/schemas/CustomerBrowserSession'
        flow:
          $ref: '#/components/schemas/Flow'
        integrationType:
          $ref: '#/components/schemas/IntegrationType'
        paymentMethodType:
          $ref: '#/components/schemas/PaymentMethodType'
        merchantTransactionId:
          type: string
        operation:
          $ref: '#/components/schemas/OperationRequest'
      type: object
    InitTransactionV1RequestBody:
      properties:
        customer:
          $ref: '#/components/schemas/Customer'
        customerAccountId:
          description: "Unique identifier of customer account in FinteqHub. \nIf `customerAccountId` provided, the parameters in operation credentials marked as `customerAccountPrefillable:true`\nshould not be included in request, as the values will be taken from saved customer account data.\n"
          $ref: '#/components/schemas/NullULID'
        session:
          $ref: '#/components/schemas/SessionV1'
        flow:
          $ref: '#/components/schemas/Flow'
        integration:
          description: "Payment integration will be used to process transaction.\n\nIf parameter is provided in request, FinteqHub will directs the transaction through a predefined payment integration. \nIn the absence of this parameter, the first suitable integration will be used according to configured routing rules.\n"
          $ref: '#/components/schemas/IntegrationType'
        paymentMethod:
          description: Payment method will be used to process transaction. Required when `flow:direct`.
          $ref: '#/components/schemas/PaymentMethodType'
        merchantTransactionId:
          type: string
          maxLength: 100
          description: Unique identifier of transaction in the merchant's platform.
        operation:
          $ref: '#/components/schemas/OperationRequestV1'
      type: object
      required:
      - flow
      - operation
      - customer
    GetPaymentMethodsV1RequestBody:
      properties:
        currencyCode:
          description: Operation ISO 4217 currency code.
          $ref: '#/components/schemas/CurrencyCode'
        customer:
          $ref: '#/components/schemas/PaymentMethodsCustomer'
        session:
          $ref: '#/components/schemas/PaymentMethodsSession'
      type: object
    CreateCustomerAccountV1RequestBody:
      properties:
        paymentMethod:
          description: Payment method associated with the customer account.
          $ref: '#/components/schemas/PaymentMethodType'
        customer:
          $ref: '#/components/schemas/Customer'
        parameters:
          type: object
          description: |
            Additional parameters required for creating customer account.
            The parameters are defined by the payment integration.
          x-go-type: pgw.dev/lib/fbk/types/jewson.Object
      type: object
    CreateCustomerAccountV1ResponseBody:
      $ref: '#/components/schemas/PaymentMethodsCustomerAccount'
    CashierMethodsRequestBody:
      type: object
      properties:
        initToken:
          type: string
          format: string
          description: |
            **initToken** is a JWT used for widget initialization. It contains encrypted session and customer data and is generated on the merchant backend.

            **Structure:**
            - Public part (JWT claims):
              - `merchantId`: Merchant identifier (string)
              - `projectId`: Project identifier (string)
              - `jid`: Unique JWT ID (string, UUID)
              - `exp`: Expiration time in seconds since Unix epoch (UTC). Must not exceed 60 minutes from the current moment.
            - Private part (JWT payload):
              - `currencyCode`: Transaction currency (e.g. "USD")
              - `customer`: Customer object (see below)
              - `session`: Session object (see below)

            **Example payload:**
            ```json
            {
              "merchantId": "softswiss",
              "projectId": "01968b4a-56e9-198a-d793-957a54856de5",
              "jid": "b7e2c1c2-1b2a-4e3b-9c1d-2e3b4c5d6f7a",
              "exp": 1718123456,
              "currencyCode": "NGN",
              "customer": {
                "id": "c41fed51-7b1d-4b8c-89f3-101e26e825f0",
                "name": "customer name",
                "email": "user@example.com",
                "phoneNumber": "3745689777",
                "phoneCountryCode": "1",
                "birthDate": "2020-12-08",
                "countryCode": "NG"
              },
              "session": {
                "ip": "255.255.255.255"
              }
            }
            ```

            - The token must be signed with the merchant's project secret using HS512.
            - The `exp` claim is required and must be no more than 60 minutes from the current time.
            - All sensitive data must be included only in the payload, not in JWT headers.
            - The resulting JWT is passed as the `initToken` parameter to the /cashier-methods endpoint.
        locale:
          description: "Language code for payment form localization in BCP-47 format. \nDefaults to 'en' if not provided.\n"
          $ref: '#/components/schemas/BCP47Language'
      required:
      - initToken
    CashierMethodsResponseBody:
      type: object
      properties:
        paymentMethods:
          type: array
          description: Available payment methods for the customer
          items:
            $ref: '#/components/schemas/CashierPaymentMethod'
        accessToken:
          type: string
          format: jwt
          description: JWT access token for authenticating subsequent API calls
        refreshToken:
          type: string
          description: Opaque token for refreshing accessToken when it expires
        cashierConfig:
          type: object
          description: Configuration data for rendering the cashier widget from merchant YAML
          x-go-type: pgw.dev/lib/fbk/types/jewson.Object
      required:
      - paymentMethods
      - accessToken
      - refreshToken
      - cashierConfig
    CashierPaymentMethod:
      type: object
      properties:
        paymentMethodType:
          $ref: '#/components/schemas/PaymentMethodType'
        friendlyName:
          type: string
          description: Display name for the payment method shown in cashier
        logo:
          type: string
          description: Payment method logo URL shown in cashier
        transactionType:
          $ref: '#/components/schemas/TxType'
        minAmount:
          type: string
          format: decimal
          description: Minimum transaction amount for this payment method
          x-go-type: github.com/shopspring/decimal.Decimal
        maxAmount:
          type: string
          format: decimal
          description: Maximum transaction amount for this payment method
          x-go-type: github.com/shopspring/decimal.Decimal
        fee:
          type: string
          description: Fee information for this payment method
        credentials:
          type: array
          description: |
            Dictionary of parameters required for transaction initialization.
            Contains credential names, their parameters and characteristics
            (format, min/max length, example, type, i18n, required/optional, etc.)
          items:
            type: object
            additionalProperties:
              $ref: '#/components/schemas/CashierCredentialField'
        customerAccounts:
          type: array
          description: |
            Saved customer accounts for this payment method.
            For card-acquirer: active non-expired customer accounts
            For other methods: active customer accounts
            Empty array if no applicable accounts found
          items:
            $ref: '#/components/schemas/CashierCustomerAccount'
      required:
      - paymentMethodType
      - friendlyName
      - transactionType
      - minAmount
      - maxAmount
      - credentials
      - customerAccounts
    CashierCredentialField:
      type: object
      properties:
        placeholder:
          type: string
          description: Placeholder text shown in cashier
        friendlyName:
          type: string
          description: Field label shown in cashier
        minLength:
          type: string
          description: Minimum length constraint
        maxLength:
          type: string
          description: Maximum length constraint
        required:
          type: boolean
          description: Whether field is required
        format:
          type: string
          description: Field format constraint
        type:
          type: string
          description: Field data type
        oneOf:
          type: array
          items:
            type: string
          description: Enumerated possible values if applicable
        customerAccountPrefillable:
          type: boolean
          description: Whether field can be prefilled from customer account
      required:
      - placeholder
      - friendlyName
      - required
      - type
    CashierCustomerAccount:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ULID'
        integrationAccountId:
          type: string
          description: "Unique identifier of customer account in external system.\nPossible values: wallet, IBAN, masked PAN (ISO/IEC 7811, ISO/IEC 7812), \nphone_number, email, etc.\n"
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp of the customer account
        prefillableTransactionTypes:
          type: array
          items:
            $ref: '#/components/schemas/TxType'
          description: Transaction types that can use this account for prefilling
      required:
      - id
      - integrationAccountId
      - updatedAt
      - prefillableTransactionTypes
    CustomerBrowserSession:
      type: object
      properties:
        ip:
          example: 255.255.255.255
          type: string
        os:
          type: string
        browser:
          type: string
          maxLength: 50
        acceptHeader:
          type: string
          description: |
            The exact content of the HTTP ACCEPT header as sent to the 3DS Requester from the Cardholder browser.
            Any other header different than the ACCEPT header will be rejected.
            Example: application/json,text/plain,text/html,*/*.
        userAgent:
          type: string
          description: Exact content of the HTTP user-agent header.
        javaEnabled:
          type: boolean
          description: |
            Boolean that represents the ability of the cardholder browser to execute Java.
            The value can be retrieved by accessing a property of the navigator with JavaScript, navigator.javaEnabled.
        language:
          type: string
          description: |
            Value representing the browser language as defined in IETF BCP47.
            Note that only one browser language tag is about to be submitted as per the above IETF BCP47.
            Numeric chars are also allowed in the subtag and will represent the region.Example: en-GB, zh-guoyu, fil-PH, gsw, es-419, de-1996, etc.
            The value can be retrieved by accessing a property of the navigator with JavaScript, navigator.language.
        colorDepth:
          type: integer
          description: |
            Value representing the bit depth of the colour palette for displaying images, in bits per pixel.
            Obtained from Cardholder browser using the screen.colorDepth property.
            The value as per EMVCo specs can be one of 1, 4, 8, 15, 16, 24, 32, 48.
            In case, an unsupported color_depth is determined, the nearest supported value that is less than the actual one needs to be submitted.
            For example, if the obtained value is 30, which is not supported as per EMVCo specs, 24 has to be submitted.
        screenHeight:
          type: integer
          description: Total height of the Cardholder's screen in pixels. Value is returned from the screen.height property.
        screenWidth:
          type: integer
          description: Total width of the Cardholder's screen in pixels. Value is returned from the screen.width property.
        windowHeight:
          type: integer
          description: Total height of the Cardholder's window in pixels. Value is returned from the document.body.clientHeight property.
        windowWidth:
          type: integer
          description: Total width of the Cardholder's window in pixels. Value is returned from the document.body.clientWidth property.
        windowInnerHeight:
          type: integer
          description: Interior height of the Cardholder's window in pixels. Value is returned from the window.innerHeight property.
        windowInnerWidth:
          type: integer
          description: Interior width of the Cardholder's window in pixels. Value is returned from the window.innerWidth property.
        timeZoneOffset:
          type: integer
          description: |
            Time difference between UTC time and the Cardholder browser local time, in minutes.
            Note that the offset is positive if the local time zone is behind UTC and negative if it is ahead.
            If UTC -5 hours then submit 300 or +300, If UTC +2 hours then -120.
            The value can be retrieved using Javascript getTimezoneOffset() method over Date object.
      x-go-type: pgw.dev/lib/fbk/contract/processing-api.CustomerBrowserSession
    Device:
      type: object
      description: "Customer's device information. \nWhen using `flow:form` this information is collected automatically by FinteqHub processing SDK.\nWhen using `flow:direct` it is recommended to include this information in the request.\n"
      properties:
        type:
          type: string
          description: The type of customer's device.
        browser:
          type: object
          x-go-type: pgw.dev/lib/fbk/contract/processing-api.Browser
          description: Customer's browser information.
          properties:
            platform:
              type: string
              description: "The platform on which the customers's browser is running. \nRetrieved from `navigator.platform` JavaScript property.\n\nExample: \"MacIntel\"\n"
            acceptHeader:
              type: string
              description: |
                HTTP headers accepted by the customer's browser. Headers of any other type will be rejected.

                Example: "application/json,text/plain,text/html,\*/\*"
            userAgent:
              type: string
              description: |
                HTTP User-Agent header, which identifies the customer's browser.
                Retrieved from `navigator.userAgent` JavaScript property.

                Example: "Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Mobile Safari/537.36"
            javaEnabled:
              type: boolean
              description: |
                Indicates whether the customer's browser can execute Java.
                Retrieved from `navigator.javaEnabled()` Javascript method.
            javaScriptEnabled:
              type: boolean
              description: |
                Indicates whether the customer's browser can execute JavaScript.
            language:
              description: "The preferred language of the customer's browser, specified in BCP-47 format. \nRetrieved from `navigator.language` Javascript property.\n  \nExample: \"en-US\"\n"
              $ref: '#/components/schemas/BCP47Language'
            colorDepth:
              type: integer
              description: "The screen color depth in the customer's device, measured in bits per pixel.\nRetrieved from `screen.colorDepth` JavaScript property.\n\nValid values: 1, 4, 8, 15, 16, 24, 32, 48 (as per EMVCo specifications). \nIf the detected value is unsupported (e.g., 30), use the closest lower supported value (e.g., 24).\n"
            screenHeight:
              type: integer
              description: |
                The height of the customer's screen, in pixels.
                Retrieved from `screen.height` JavaScript property.
            screenWidth:
              type: integer
              description: |
                The width of the customer's screen, in pixels.
                Retrieved from `screen.width` JavaScript property.
            windowHeight:
              type: integer
              description: |
                The total height of the customer's browser window, in pixels.
                Retrieved from `document.body.clientHeight` JavaScript property.
            windowWidth:
              type: integer
              description: |
                The total width of the customer's browser window, in pixels.
                Retrieved from `document.body.clientWidth` JavaScript property.
            windowInnerHeight:
              type: integer
              description: |
                The interior height of the customer's browser window including horizontal scrollbar, in pixels.
                Retrieved from `window.innerHeight` JavaScript property.
            windowInnerWidth:
              type: integer
              description: |
                The interior width of the customer's browser window including vertical scrollbar, in pixels.
                Retrieved from `window.innerWidth` JavaScript property.
            timeZoneOffset:
              type: integer
              description: |
                The time difference between UTC and the customer's local timezone, in minutes.
                Retrieved from `Date.getTimezoneOffset()` JavaScript method.

                Example:
                * UTC-5 → +300.
                * UTC+2 → -120.
            timeZoneName:
              type: string
              description: |
                The name of the time zone based on the browser's locale settings.
                Retrieved from `Intl.DateTimeFormat().resolvedOptions().timeZone` JavaScript property.

                Example: "Europe/Rome"
      x-go-type: pgw.dev/lib/fbk/contract/processing-api.Device
    Session:
      type: object
      properties:
        ttl:
          type: number
        createdAt:
          $ref: '#/components/schemas/Time'
    SessionCustomerAccount:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ULID'
        integrationAccountId:
          type: string
        paymentMethod:
          $ref: '#/components/schemas/PaymentMethodType'
        status:
          $ref: '#/components/schemas/CustomerAccountStatus'
        metadata:
          type: object
          x-go-type: pgw.dev/lib/fbk/types/jewson.Object
    SessionCustomer:
      type: object
      x-go-pointer: true
      x-go-omitempty: true
      properties:
        id:
          $ref: '#/components/schemas/ULID'
        projectId:
          $ref: '#/components/schemas/ULID'
        merchantCustomerId:
          type: string
        name:
          type: string
        countryCode:
          $ref: '#/components/schemas/Country'
          x-go-omitempty: true
        accounts:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/SessionCustomerAccount'
    GetSessionResponseBody:
      type: object
      properties:
        session:
          type: object
          $ref: '#/components/schemas/Session'
        customer:
          type: object
          $ref: '#/components/schemas/SessionCustomer'
        operation:
          type: object
          $ref: lib/fbk/contract/bookkeeping/generated.yml#/types/operationSession
        initCredentials:
          type: object
          x-go-type: pgw.dev/lib/fbk/types/jewson.Object
        paymentMethods:
          $ref: '#/components/schemas/SessionPaymentMethodsSpecification'
    SessionPaymentMethodsSpecification:
      type: object
      properties:
        credentials:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/CredentialsDictionaryElement'
        paymentMethods:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/SessionPaymentMethodSpecification'
          x-go-type: pgw.dev/lib/fbk/contract/bookkeeping.PaymentMethodType
    SessionPaymentMethodSpecification:
      type: object
      properties:
        friendlyName:
          type: string
        logo:
          type: string
        $credentials:
          type: string
    SessionV1:
      type: object
      description: "Customer's session information. \nFor `flow:form` session must be provided within 2 requests – init or submit transaction.\n"
      properties:
        ip:
          example: 255.255.255.255
          type: string
          description: "Customer's IP address in IPv4 or IPv6 format. \nRequired for flow:direct. If not provided for flow:form, then FinteqHub will take the request source IP.\n"
        device:
          $ref: '#/components/schemas/Device'
      x-go-type: pgw.dev/lib/fbk/contract/processing-api.Session
    PaymentMethodsSession:
      type: object
      description: Customer's session information.
      properties:
        ip:
          example: 255.255.255.255
          type: string
          description: Customer's IP address in IPv4 or IPv6 format.
      x-go-type: pgw.dev/lib/fbk/contract/processing-api.PaymentMethodsSession
    GetPaymentMethodsResponseBody:
      type: object
      properties:
        availableMethods:
          type: object
          additionalProperties:
            items:
              $ref: '#/components/schemas/IntegrationType'
            type: array
          x-go-type: pgw.dev/lib/fbk/contract/bookkeeping.PaymentMethodType
        availableCardBrands:
          type: object
          additionalProperties:
            items:
              type: string
            type: array
          x-go-type: pgw.dev/lib/fbk/contract/bookkeeping.PaymentMethodType
    FlexibleAdjustmentFields:
      type: object
      properties:
        flexible:
          $ref: '#/components/schemas/FieldDetails'
    FlexibleAdjustment:
      x-go-pointer: true
      x-go-omitempty: true
      type: object
      properties:
        fields:
          $ref: '#/components/schemas/FlexibleAdjustmentFields'
        required:
          type: array
          items:
            type: string
    Adjustments:
      type: object
      properties:
        None:
          $ref: '#/components/schemas/AdjustmentPerDirection'
        PositiveAbsolute:
          $ref: '#/components/schemas/AdjustmentPerDirection'
        Flexible:
          $ref: '#/components/schemas/FlexibleAdjustment'
    GetPaymentMethodsV1ResponseBody:
      type: object
      properties:
        integrations:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/IntegrationsSpecification'
          x-go-type: pgw.dev/lib/fbk/contract/bookkeeping.IntegrationType
        credentials:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/CredentialsDictionaryElement'
        paymentMethods:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/PaymentMethodsSpecification'
          x-go-type: pgw.dev/lib/fbk/contract/bookkeeping.PaymentMethodType
        adjustments:
          $ref: '#/components/schemas/Adjustments'
    GetPaymentMethodsV1ResponseBodyExtended:
      type: object
      properties:
        integrations:
          type: object
          description: The object identifies the available payment integrations.
          additionalProperties:
            $ref: '#/components/schemas/IntegrationsSpecification'
          x-go-type: pgw.dev/lib/fbk/contract/bookkeeping.IntegrationType
        credentials:
          type: object
          description: "The object contains the description of credentials parameters per payment method needed to complete the transaction.\nWe recommend dynamically setting parameters requirements based on this list for a specific integration to avoid manual \nadjustments with each API modification.\n"
          additionalProperties:
            $ref: '#/components/schemas/CredentialsDictionaryElement'
        paymentMethods:
          type: object
          description: "The object identifies the available payment methods for the customer per transaction type and integration flow. \nEach object contains the links to appropriate `integrations`, `credentials`, `adjustments` schemas that must be used when initiating a new transaction.\n"
          additionalProperties:
            $ref: '#/components/schemas/PaymentMethodsSpecification'
          x-go-type: pgw.dev/lib/fbk/contract/bookkeeping.PaymentMethodType
        adjustments:
          description: The object identifies all supported forms of amount adjustments.
          $ref: '#/components/schemas/Adjustments'
        customerAccounts:
          type: object
          description: |
            The object identifies the available customer accounts that might be used by customer to complete transaction.
            Returned only if `withCustomerAccount:true` query parameter was specified in the request.

            **Note**, that only active customer accounts are listed on API.
          x-go-pointer: true
          x-go-omitempty: true
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/PaymentMethodsCustomerAccount'
          x-go-type: pgw.dev/lib/fbk/contract/bookkeeping.PaymentMethodType
    IntegrationsSpecification:
      type: object
      properties:
        title:
          type: string
        logo:
          type: string
        transactionTypes:
          type: object
          additionalProperties:
            items:
              $ref: '#/components/schemas/TxType'
            type: array
          x-go-type: pgw.dev/lib/fbk/contract/bookkeeping.FlowType
    CredentialsDictionaryElement:
      type: object
      properties:
        fields:
          type: object
          description: |
            List of parameters that you need to collect from Customer.

            Example of fields object:

            ```
            "fields": {
              "billingAddress.countryCode": {
                "description": "The country of customer according to the ISO 3166.",
                "example": "US",
                "format": "country",
                "friendlyName": "Country",
                "i18nId": "countryCode",
                "maxLength": "2",
                "minLength": "2",
                "type": "string"
              },
              "billingAddress.city": {
                ...
              }
            }
            ```
          additionalProperties:
            $ref: '#/components/schemas/FieldDetails'
        required:
          type: array
          description: List of required fields to complete the transaction. If the field is not included in the array, it is considered optional.
          items:
            type: string
    FieldDetails:
      type: object
      properties:
        type:
          type: string
        friendlyName:
          type: string
          x-go-omitempty: true
        description:
          type: string
          x-go-omitempty: true
        format:
          type: string
          x-go-omitempty: true
        example:
          type: string
          x-go-omitempty: true
        oneOf:
          type: array
          items:
            type: string
          x-go-omitempty: true
        maxLength:
          type: string
          x-go-omitempty: true
        minLength:
          type: string
          x-go-omitempty: true
        minimum:
          type: string
          x-go-omitempty: true
        maximum:
          type: string
          x-go-omitempty: true
        i18nId:
          type: string
          x-go-omitempty: true
        customerAccountPrefillable:
          type: boolean
          x-go-omitempty: true
    PaymentMethodsSpecification:
      type: object
      properties:
        friendlyName:
          type: string
        logo:
          type: string
        transactionTypes:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/SpecPerTransactionType'
          x-go-type: pgw.dev/lib/fbk/contract/bookkeeping.FlowType
    SpecPerTransactionType:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/TransactionTypeSpecification'
      x-go-type: pgw.dev/lib/fbk/contract/bookkeeping.TransactionType
    TransactionTypeSpecification:
      type: object
      properties:
        $adjustment:
          type: string
        $credentials:
          type: string
        $integrations:
          type: array
          items:
            $ref: '#/components/schemas/IntegrationType'
    AdjustmentPerDirection:
      x-go-omitempty: true
      type: object
      additionalProperties:
        $ref: '#/components/schemas/AdjustmentsFields'
      x-go-type: pgw.dev/lib/fbk/contract/bookkeeping.AdjustmentDirection
    AdjustmentsFields:
      type: object
      properties:
        fields:
          $ref: '#/components/schemas/AdjustmentSpecificationDetails'
    AdjustmentSpecificationDetails:
      type: object
      properties:
        value:
          $ref: '#/components/schemas/FieldDetails'
        type:
          $ref: '#/components/schemas/AdjustmentSpecificationType'
    AdjustmentSpecificationType:
      type: object
      properties:
        type:
          type: string
        allowed:
          type: array
          items:
            $ref: '#/components/schemas/AdjustmentType'
    OperationRequest:
      properties:
        amount:
          example: "100.00"
          type: string
          x-go-type: github.com/shopspring/decimal.Decimal
        adjustments:
          type: object
          properties:
            positive:
              $ref: '#/components/schemas/AdjustmentDetails'
            negative:
              $ref: '#/components/schemas/AdjustmentDetails'
          x-go-type: pgw.dev/lib/fbk/contract/bookkeeping.Adjustments
        currencyCode:
          $ref: '#/components/schemas/CurrencyCode'
        failUrl:
          $ref: '#/components/schemas/NullHttpURL'
        merchantOperationId:
          type: string
        credentials:
          $ref: '#/components/schemas/Credentials'
        successUrl:
          $ref: '#/components/schemas/NullHttpURL'
      type: object
    OperationRequestV1:
      description: Operation's details.
      properties:
        amount:
          example: "100.00"
          type: string
          maxLength: 20
          description: "Operation amount in `currencyCode` units. \nDecimal value that includes the appropriate number of decimal places based on ISO 4217.\n"
          x-go-type: github.com/shopspring/decimal.Decimal
        adjustments:
          type: object
          description: "Adjustment details. Send this object to confirm that amount adjustment might happen. \nThe available adjustment configuration for payment method is defined in [Get payment methods](#tag/Seamless-API/paths/~1v1~1transactions~1payment-methods/post) response.\n"
          properties:
            positive:
              description: Allow to increase initial amount of transaction.
              $ref: '#/components/schemas/AdjustmentDetails'
            negative:
              description: Allow to decrease initial amount of transaction.
              $ref: '#/components/schemas/AdjustmentDetails'
            flexible:
              type: boolean
              example: false
              description: |
                Allow to increase or decrease initial amount of transaction when the value is unknown. Can have one of the following values:
                  * `true` - adjustments are allowed;
                  * `false` - adjustments are not allowed.
          x-go-type: pgw.dev/lib/fbk/contract/bookkeeping.Adjustments
        currencyCode:
          description: Operation ISO 4217 currency code.
          $ref: '#/components/schemas/CurrencyCode'
        failUrl:
          description: |
            The URL to which the customer will be redirected when the operation result is unsuccessful.
            If not provided in request, 'Failure URL' from project settings will be used.
          $ref: '#/components/schemas/NullHttpURL'
        merchantOperationId:
          type: string
          maxLength: 100
          description: Unique identifier of operation in the merchant's platform.
        credentials:
          $ref: '#/components/schemas/CredentialsV1'
        successUrl:
          description: "The URL to which the customer will be redirected when the operation result is successful. \nIf not provided in request, 'Success URL' from project settings will be used.\n"
          $ref: '#/components/schemas/NullHttpURL'
      type: object
      required:
      - amount
      - currencyCode
    OperationStatus:
      $ref: lib/fbk/contract/bookkeeping/generated.yml#/types/operationStatus
    OperationUpdateData:
      properties:
        metadata:
          type: object
          x-go-type: pgw.dev/lib/fbk/types/jewson.Object
        status:
          $ref: '#/components/schemas/OperationStatus'
      required:
      - status
      type: object
    Operation:
      description: Operation's details.
      properties:
        amount:
          type: string
          example: "100.00"
          x-go-type: github.com/shopspring/decimal.Decimal
          description: |
            Operation amount in `currencyCode` units. Equals to `initialAmount`. Decimal value.
        initialAmount:
          type: string
          example: "100.00"
          x-go-type: github.com/shopspring/decimal.Decimal
          description: |
            Initial operation amount in `initialCurrencyCode` units, specified in init request. Decimal value.
        processingAmount:
          type: string
          example: "100.00"
          x-go-type: github.com/shopspring/decimal.Decimal
          description: "Processed operation amount in `processingCurrencyCode` units. \nMight differ from inital amount if currency conversion and/or amount rounding is applied. \nDecimal value.\n"
        currencyCode:
          description: |
            Operation ISO 4217 currency code. Equals to `initialCurrencyCode`.
          $ref: '#/components/schemas/CurrencyCode'
        initialCurrencyCode:
          description: |
            Initial operation ISO 4217 currency code, specified in init request.
          $ref: '#/components/schemas/CurrencyCode'
        processingCurrencyCode:
          description: |
            Processed operation ISO 4217 currency code. Might differ from inital currency if currency conversion is applied.
          $ref: '#/components/schemas/CurrencyCode'
        createdAt:
          description: Date and time when the operation was created (UTC).
          $ref: '#/components/schemas/Time'
        updatedAt:
          description: Date and time of the last operation update (UTC).
          $ref: '#/components/schemas/Time'
        flow:
          $ref: '#/components/schemas/Flow'
        id:
          description: Unique identifier of operation assigned by FinteqHub.
          $ref: '#/components/schemas/ULID'
        integrationOperationId:
          type: string
          example: "123456789"
          description: Uniqie identifier of operation in payment integration.
        integrationStatusCode:
          type: string
          example: CANCELLED
          description: "Status (status code / message / error code) of operation received form payment integration. \nValue is updated every time, when a new status form integration is retrieved.\n"
        integrationType:
          description: Payment integration that processed operation.
          $ref: '#/components/schemas/IntegrationType'
        integrationTitle:
          type: string
          example: AstroPay
          description: Real name of payment integration that processed operation.
        merchantOperationId:
          type: string
          description: Unique identifier of operation in the merchant's platform.
        credentials:
          type: object
          description: Masked operation credentials, specified in init request.
          x-go-type: pgw.dev/lib/fbk/types/jewson.Object
        metadata:
          type: object
          x-go-type: pgw.dev/lib/fbk/types/jewson.Object
          description: Operation metadata.
        info:
          type: object
          x-go-type: pgw.dev/lib/fbk/types/jewson.Object
          description: "Useful payment data received from integration.\nData structure depends on integration and might contain reference id from bank transfer statement, \nbank auth code, payment account info etc.\n"
        paymentInstrument:
          type: array
          description: Final payment provider(s) or payment method that is used by integration for transaction processing.
          items:
            type: string
            example: AstroPay Wallet
        projectId:
          description: Unique identifier of project in FinteqHub for which transaction is initiated.
          $ref: '#/components/schemas/ULID'
        status:
          $ref: '#/components/schemas/OperationStatus'
        terminalId:
          description: Unique identifier of terminal in FinteqHub that is used for transaction processing.
          $ref: '#/components/schemas/ULID'
        transactionId:
          description: Unique identifier of related transaction assigned by FinteqHub.
          $ref: '#/components/schemas/ULID'
        type:
          $ref: '#/components/schemas/OperationType'
        paymentMethodType:
          description: Payment method that is used for transaction processing.
          $ref: '#/components/schemas/PaymentMethodType'
        customerAccountId:
          description: Unique identifier of customer account in FinteqHub that is used for transaction processing.
          $ref: '#/components/schemas/NullULID'
        finalizationDate:
          description: Date and time when operation is finalized (founds were settled in account or reversed).
          $ref: '#/components/schemas/NullTime'
      type: object
    OperationExtended:
      description: Operation's details.
      properties:
        amount:
          type: string
          example: "100.00"
          x-go-type: github.com/shopspring/decimal.Decimal
          description: |
            Operation amount in `currencyCode` units. Equals to `initialAmount`. Decimal value.
        initialAmount:
          type: string
          example: "100.00"
          x-go-type: github.com/shopspring/decimal.Decimal
          description: |
            Initial operation amount in `initialCurrencyCode` units, specified in init request. Decimal value.
        processingAmount:
          type: string
          example: "100.00"
          x-go-type: github.com/shopspring/decimal.Decimal
          description: "Processed operation amount in `processingCurrencyCode` units. \nMight differ from inital amount if currency conversion and/or amount rounding is applied. \nDecimal value.\n"
        currencyCode:
          description: |
            Operation ISO 4217 currency code. Equals to `initialCurrencyCode`.
          $ref: '#/components/schemas/CurrencyCode'
        initialCurrencyCode:
          description: |
            Initial operation ISO 4217 currency code, specified in init request.
          $ref: '#/components/schemas/CurrencyCode'
        processingCurrencyCode:
          description: |
            Processed operation ISO 4217 currency code. Might differ from inital currency if currency conversion is applied.
          $ref: '#/components/schemas/CurrencyCode'
        createdAt:
          description: Date and time when the operation was created (UTC).
          $ref: '#/components/schemas/Time'
        updatedAt:
          description: Date and time of the last operation update (UTC).
          $ref: '#/components/schemas/Time'
        flow:
          $ref: '#/components/schemas/Flow'
        id:
          description: Unique identifier of operation assigned by FinteqHub.
          $ref: '#/components/schemas/ULID'
        integrationOperationId:
          type: string
          example: "123456789"
          description: Uniqie identifier of operation in payment integration.
        integrationStatusCode:
          type: string
          example: CANCELLED
          description: "Status (status code / message / error code) of operation received form payment integration. \nValue is updated every time, when a new status form integration is retrieved.\n"
        integrationType:
          description: Payment integration that processed operation.
          $ref: '#/components/schemas/IntegrationType'
        integrationTitle:
          type: string
          example: AstroPay
          description: Real name of payment integration that processed operation.
        merchantOperationId:
          type: string
          description: Unique identifier of operation in the merchant's platform.
        credentials:
          type: object
          description: Masked operation credentials, specified in init request.
          x-go-type: pgw.dev/lib/fbk/types/jewson.Object
        metadata:
          type: object
          x-go-type: pgw.dev/lib/fbk/types/jewson.Object
          description: Operation metadata.
        info:
          type: object
          x-go-type: pgw.dev/lib/fbk/types/jewson.Object
          description: "Useful payment data received from integration.\nData structure depends on integration and might contain reference id from bank transfer statement, \nbank auth code, payment account info etc.\n"
        paymentInstrument:
          type: array
          description: Final payment provider(s) or payment method that is used by integration for transaction processing.
          items:
            type: string
            example: AstroPay Wallet
        projectId:
          description: Unique identifier of project in FinteqHub for which transaction is initiated.
          $ref: '#/components/schemas/ULID'
        status:
          $ref: '#/components/schemas/OperationStatus'
        terminalId:
          description: Unique identifier of terminal in FinteqHub that is used for transaction processing.
          $ref: '#/components/schemas/ULID'
        transactionId:
          description: Unique identifier of related transaction assigned by FinteqHub.
          $ref: '#/components/schemas/ULID'
        type:
          $ref: '#/components/schemas/OperationType'
        paymentMethodType:
          description: Payment method that is used for transaction processing.
          $ref: '#/components/schemas/PaymentMethodType'
        customerAccountId:
          description: Unique identifier of customer account in FinteqHub that is used for transaction processing.
          $ref: '#/components/schemas/NullULID'
        finalizationDate:
          description: Date and time when operation is finalized (founds were settled in account or reversed).
          $ref: '#/components/schemas/NullTime'
        statusChangeReason:
          type: string
          description: The status code / message / error code of operation, that is received form Integration (in init/check status/callback).
        fallbackResult:
          type: array
          description: A list of fallback integration results.
          items:
            $ref: lib/fbk/contract/bookkeeping/generated.yml#/types/fallbackResultItem
      type: object
    OperationLog:
      $ref: lib/fbk/contract/bookkeeping/generated.yml#/types/operationLog
    OperationCommunicationType:
      $ref: lib/fbk/contract/bookkeeping/generated.yml#/types/operationCommunicationType
    CommunicationLogGroup:
      $ref: lib/fbk/contract/bookkeeping/generated.yml#/types/communicationLogGroup
    Credentials:
      type: object
      x-go-type: pgw.dev/lib/fbk/types/jewson.Object
      example:
        $ref: '#/components/schemas/ExampleBankCard'
    CredentialsV1:
      type: object
      description: "Payment credentials needed to complete transaction.\nRequired parameters in the credentials depend on selected `paymentMethod` and defined in \n[Get payment methods](#tag/Seamless-API/paths/~1v1~1transactions~1payment-methods/post) response.\n\n**Note**, that certain fields may be optional at the API level, but in fact their inclusion is required by the business \nlogic of different integrations within a singular payment method. \nContact technical support team to get the requirements for specific integrations.\n"
      x-go-type: pgw.dev/lib/fbk/types/jewson.Object
      example:
        $ref: '#/components/schemas/ExampleBankCard'
    ExampleBankCard:
      type: ExampleBankCard
      user:
        firstName: John
        lastName: Smith
        email: user@example.com
        phone: "+1234567890"
      id: "1"
      branch: Example Bank Branch
      accountName: John Smith
      cardNumber: '************1234'
    Transaction:
      description: Transaction's details.
      properties:
        amount:
          description: Transaction amount in `currencyCode` units. Equals to `initialAmount`. Decimal value.
          type: string
          example: "100.00"
          x-go-type: github.com/shopspring/decimal.Decimal
        initialAmount:
          description: Initial transaction amount in `initialCurrencyCode` units, specified in init request. Decimal value.
          type: string
          example: "100.00"
          x-go-type: github.com/shopspring/decimal.Decimal
        processingAmount:
          example: "100.00"
          description: "Processed transaction amount in `processingCurrencyCode` units. \nMight differ from inital amount if currency conversion and/or amount rounding is applied. Decimal value.\n"
          type: string
          x-go-type: github.com/shopspring/decimal.Decimal
        currencyCode:
          description: |
            Transaction ISO 4217 currency code. Equals to `initialCurrencyCode`.
          $ref: '#/components/schemas/CurrencyCode'
        initialCurrencyCode:
          description: |
            Initial transaction ISO 4217 currency code, specified in init request.
          $ref: '#/components/schemas/CurrencyCode'
        processingCurrencyCode:
          description: "Processed transaction ISO 4217 currency code. \nMight differ from inital currency if currency conversion is applied.\n"
          $ref: '#/components/schemas/CurrencyCode'
        createdAt:
          description: Date and time when the transaction was created (UTC).
          $ref: '#/components/schemas/Time'
        updatedAt:
          description: Date and time of the last transaction update (UTC).
          $ref: '#/components/schemas/Time'
        id:
          description: Unique identifier of transaction assigned by FinteqHub.
          $ref: '#/components/schemas/ULID'
        customerId:
          description: Unique identifier of customer in FinteqHub that initiated the transaction.
          $ref: '#/components/schemas/ULID'
        merchantTransactionId:
          type: string
          description: Unique identifier of transaction in the merchant's platform.
        metadata:
          type: object
          description: Transaction's metadata.
          x-go-type: pgw.dev/lib/fbk/types/jewson.Object
        projectId:
          description: Unique identifier of project in FinteqHub for which transaction is initiated.
          $ref: '#/components/schemas/ULID'
        status:
          description: Transaction status.
          $ref: lib/fbk/contract/bookkeeping/generated.yml#/types/transactionStatus
        type:
          $ref: '#/components/schemas/TxType'
        userCountryCode:
          description: Customer's country code.
          $ref: '#/components/schemas/Country'
      type: object
    TxType:
      $ref: lib/fbk/contract/bookkeeping/generated.yml#/types/transactionType
    ErrorResponseBody:
      properties:
        error:
          type: string
          description: Request error message.
        details:
          type: object
          description: Request error details.
          example: {}
          x-go-type: pgw.dev/lib/fbk/types/jewson.Object
    ResponseHtml:
      type: string
    PaymentMethodOverIntegrations:
      type: object
      properties:
        paymentMethod:
          $ref: '#/components/schemas/PaymentMethodType'
        integrations:
          type: array
          items:
            $ref: '#/components/schemas/IntegrationType'
    ULID:
      type: string
      format: uuid
      x-go-type: pgw.dev/lib/fbk/types/ulid.ULID
      x-go-type-string-parse: pgw.dev/lib/fbk/types/ulid.Parse
    NullULID:
      type: string
      format: uuid
      x-go-type: pgw.dev/lib/fbk/types/ulid.NullULID
    RawPayload:
      type: string
      format: binary
    Email:
      $ref: https://raw.githubusercontent.com/mikekonan/go-types/v2.0.13/swagger.yaml#/components/schemas/Email
    PhoneNumber:
      $ref: https://raw.githubusercontent.com/mikekonan/go-types/v2.0.13/swagger.yaml#/components/schemas/PhoneNumber
    PhoneCountryCode:
      $ref: https://raw.githubusercontent.com/mikekonan/go-types/v2.0.13/swagger.yaml#/components/schemas/DialCode
    PostalCode:
      $ref: https://raw.githubusercontent.com/mikekonan/go-types/v2.0.13/swagger.yaml#/components/schemas/PostalCode
    Language:
      $ref: https://raw.githubusercontent.com/mikekonan/go-types/v2.0.13/swagger.yaml#/components/schemas/LanguageAlpha2
    Country:
      $ref: https://raw.githubusercontent.com/mikekonan/go-types/v2.0.13/swagger.yaml#/components/schemas/CountryAlpha2
    Country3:
      $ref: https://raw.githubusercontent.com/mikekonan/go-types/v2.0.13/swagger.yaml#/components/schemas/CountryAlpha3
    CurrencyCode:
      $ref: https://raw.githubusercontent.com/mikekonan/go-types/v2.0.24/swagger.yaml#/components/schemas/CurrencyCode
    HttpURL:
      $ref: https://raw.githubusercontent.com/mikekonan/go-types/v2.0.13/swagger.yaml#/components/schemas/HttpURL
    NullHttpURL:
      $ref: https://raw.githubusercontent.com/mikekonan/go-types/v2.0.13/swagger.yaml#/components/schemas/NullHttpURL
    BCP47Language:
      $ref: https://raw.githubusercontent.com/mikekonan/go-types/v2.0.14/swagger.yaml#/components/schemas/BCP47-language
    NullTime:
      $ref: https://raw.githubusercontent.com/mikekonan/go-types/v2.0.13/swagger.yaml#/components/schemas/NullTime
    Time:
      example: "2020-12-08T16:38:09.70516+03:00"
      type: string
      x-go-type: time.Time
      x-go-type-string-parse: github.com/spf13/cast.ToTimeE
    OperationAction:
      $ref: lib/fbk/contract/bookkeeping/generated.yml#/types/operationAction
    ListVirtualPaymentMethodsResponseBody:
      properties:
        virtualPaymentMethods:
          items:
            $ref: '#/components/schemas/VirtualPaymentMethod'
          type: array
      required:
      - virtualPaymentMethods
      type: object
    GetVirtualPaymentMethodResponseBody:
      properties:
        virtualPaymentMethod:
          $ref: '#/components/schemas/VirtualPaymentMethod'
      required:
      - virtualPaymentMethod
      type: object
    VirtualPaymentMethod:
      $ref: lib/fbk/contract/bookkeeping/generated.yml#/types/virtualPaymentMethod
    ListCustomersAccountsResponseBody:
      properties:
        customersAccounts:
          description: All customer accounts of customer.
          items:
            $ref: '#/components/schemas/CustomerAccount'
          type: array
      required:
      - customersAccounts
      type: object
    GetCustomerAccountResponseBody:
      properties:
        customerAccount:
          $ref: '#/components/schemas/CustomerAccount'
      required:
      - customerAccount
      type: object
    CustomerAccount:
      type: object
      description: Customer account details.
      properties:
        id:
          description: Unique identifier of customer account assigned by FinteqHub.
          $ref: '#/components/schemas/ULID'
        integrationAccountId:
          type: string
          description: Unique identifier of customer account in payment integration. Might be a card number, IBAN, wallet etc.
        customerId:
          description: Unique identifier of customer in FinteqHub who owns the account.
          $ref: '#/components/schemas/ULID'
        projectId:
          description: Unique identifier of project in FinteqHub for which customer account is created.
          $ref: '#/components/schemas/ULID'
        paymentMethod:
          description: Payment method associated with the customer account.
          $ref: '#/components/schemas/PaymentMethodType'
        status:
          $ref: '#/components/schemas/CustomerAccountStatus'
        successAttempts:
          example: 0
          type: integer
          description: Number of successful operations processed using customer account.
        unsuccessfulAttempts:
          example: 0
          type: integer
          description: Number of failed operations processed using customer account.
        blockReason:
          type: string
          example: Blocked by customer
          description: Customer account block reason. Presented when status is `blocked`.
        createdAt:
          description: Date and time when the customer account was created (UTC).
          $ref: '#/components/schemas/Time'
        updatedAt:
          description: Date and time of the last customer account update (UTC).
          $ref: '#/components/schemas/Time'
        prefillableTransactionTypes:
          type: array
          description: Specifies transaction types where customer account's details can be prefilled automatically.
          items:
            $ref: '#/components/schemas/TxType'
      required:
      - id
      - integrationAccountId
      - customerId
      - paymentMethod
      - status
      - successAttempts
      - unsuccessfulAttempts
      - blockReason
      - createdAt
      - updatedAt
      - prefillableTransactionTypes
    CustomerAccountStatus:
      type: string
      description: Customer account status. Only active customer accounts can be received on API and used for transaction initiation.
      enum:
      - active
      x-go-type: pgw.dev/lib/fbk/contract/bookkeeping.CustomerAccountStatus
    PaymentMethodsCustomerAccount:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ULID'
        integrationAccountId:
          type: string
        prefillableTransactionTypes:
          type: array
          items:
            $ref: '#/components/schemas/TxType'
        successAttempts:
          example: 0
          type: integer
        unsuccessfulAttempts:
          example: 0
          type: integer
        updatedAt:
          $ref: '#/components/schemas/Time'
        metadata:
          $ref: '#/components/schemas/CustomerAccountMetadata'
      required:
      - id
      - integrationAccountId
      - prefillableTransactionTypes
      - successAttempts
      - unsuccessfulAttempts
      - updatedAt
      x-go-type: pgw.dev/lib/fbk/contract/bookkeeping.PaymentMethodsCustomerAccount
    CustomerAccountMetadata:
      type: object
      x-go-type: pgw.dev/lib/fbk/types/jewson.Object
      x-go-omitempty: true
      properties:
        tag:
          type: string
          x-go-omitempty: true
    MerchantListOperationsResponseBody:
      properties:
        operations:
          type: array
          description: List of operations.
          items:
            $ref: '#/components/schemas/OperationForMerchant'
        offset:
          type: string
          description: Pagination offset. Specifies the number of records to skip in the subsequent request. If null, all operations were sent.
    OperationForMerchant:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of operation in FinteqHub.
        transactionId:
          type: string
          description: Unique identifier of related transaction in FinteqHub.
        projectId:
          type: string
          description: Unique identifier of project in FinteqHub for which transaction is initiated.
        opType:
          type: string
          description: Operation type.
        txType:
          type: string
          description: Transaction type.
        status:
          type: string
          description: Operation current state.
        initialAmount:
          type: string
          description: Initial operation amount in `initialCurrencyCode` units, specified in init request. Decimal value.
        initialCurrencyCode:
          type: string
          description: Initial operation ISO 4217 currency code, specified in init request.
        processingAmount:
          type: string
          description: Processed operation amount in `processingCurrencyCode` units. Might differ from inital amount if currency conversion and/or amount rounding is applied. Decimal value.
        processingCurrencyCode:
          type: string
          description: Processed operation ISO 4217 currency code. Might differ from inital currency if currency conversion is applied.
        merchantOperationId:
          type: string
          description: Unique identifier of operation in the merchant's platform.
        finalIntegration:
          type: string
          description: Payment integration that processed operation.
        initialIntegration:
          type: string
          description: Payment integration used in the first attempt (fallback) to process operation.
        finalTerminalId:
          type: string
          description: Unique identifier of terminal in FinteqHub that processed operation.
        initialTerminalId:
          type: string
          description: Unique identifier of terminal in FinteqHub used in the first attempt (fallback) to process operation.
        integrationOperationId:
          type: string
          description: Uniqie identifier of operation in payment integration.
        integrationStatusCode:
          type: string
          description: Status (status code / message / error code) of operation received form payment integration. Value is updated every time, when a new status form integration is retrieved.
        errors:
          type: array
          description: Failure reason of operation (applicable for final unsuccessful statuses)
          items:
            type: string
        createdAt:
          type: string
          description: Date and time when the operation was created (UTC).
        updatedAt:
          type: string
          description: Date and time of the last operation update (UTC).
        customer:
          $ref: '#/components/schemas/CustomerForMerchant'
        card:
          $ref: '#/components/schemas/CardForMerchant'
        paymentMethod:
          type: string
          description: Payment method used for transaction processing.
        paymentInstrument:
          type: array
          description: Final payment provider(s) or payment method used by integration for transaction processing.
          items:
            type: string
        finalizationDate:
          type: string
          description: Date and time when operation is finalized (founds were settled in account or reversed).
        fallbackIntegrationTypes:
          type: array
          description: Payment integration(s) used during all fallback attempts to process the operation in case the initial attempt failed.
          items:
            type: string
        fallbackReasons:
          type: array
          description: Reasons that triggered fallback attempts during the operation processing (e.g. integration or internal error message).
          items:
            type: string
    CardForMerchant:
      type: object
      description: Card detail's. Relevant for card-acquirer operations.
      properties:
        issuerCountryCode:
          type: string
          description: Issuer country of the card used by customer to complete operation.
        issuer:
          type: string
          description: Issuer name of the card used by customer to complete operation.
        iin:
          type: string
          description: First 6 digits of the card used by customer to complete operation.
        brand:
          type: string
    SessionForMerchant:
      type: object
      description: Customer's session details.
      properties:
        device:
          type: string
          description: Customer's device.
        os:
          type: string
          description: Customer's operating system.
        browser:
          type: string
          description: Customer's browser.
        ip:
          type: string
          description: Customer's IP address.
        ipCountryCode:
          type: string
          description: Country code defined based on customer's IP address.
        ipRegion:
          type: string
          description: Region defined based on customer's IP address.
        ipCity:
          type: string
          description: City defined based on customer's IP address.
    CustomerForMerchant:
      type: object
      description: Customer's details.
      properties:
        id:
          type: string
          description: Unique identifier of customer in FinteqHub.
        merchantCustomerId:
          type: string
          description: Unique identifier of customer in the merchant's platform
        session:
          $ref: '#/components/schemas/SessionForMerchant'
        email:
          type: string
          description: Customer's email.
        accountId:
          type: string
          description: Unique identifier of customer account in FinteqHub used for operation processing.
        integrationAccountId:
          type: string
          description: |
            Unique identifier of Customer Account in Outer System.
            Possible values: wallet - IBAN - masked PAN - phone number - email - etc.
        metadata:
          type: object
          description: Merchant's custom parameters (JSON) describing the customer. The structure depends on 'Customer metadata JSON path' merchant setting in Backoffice
          x-go-type: pgw.dev/lib/fbk/types/jewson.Object
    CashierInitTransactionRequestBody:
      type: object
      properties:
        session:
          $ref: '#/components/schemas/SessionV1'
        flow:
          $ref: '#/components/schemas/Flow'
        operation:
          $ref: '#/components/schemas/CashierOperationRequest'
        customer:
          $ref: '#/components/schemas/Customer'
        customerAccountId:
          description: |
            Unique identifier of customer account in FinteqHub.
            If provided, parameters in operation credentials marked as customerAccountPrefillable:true
            should not be included in request, as values will be taken from saved customer account data.
          $ref: '#/components/schemas/NullULID'
        paymentMethod:
          description: Payment method to be used for transaction processing
          $ref: '#/components/schemas/PaymentMethodType'
        merchantTransactionId:
          type: string
          maxLength: 255
          description: Unique identifier of transaction in merchant's platform
        interactionType:
          type: string
          enum:
          - redirect
          - h2h
          description: |
            Allows receiving processing operation data for display.
            - redirect: System returns redirect URL
            - h2h: System does not return redirect URL
            Default value is 'redirect'
      required:
      - session
      - flow
      - operation
      - customer
    CashierOperationRequest:
      type: object
      properties:
        amount:
          type: string
          format: decimal
          maxLength: 20
          description: Operation amount
          x-go-type: github.com/shopspring/decimal.Decimal
        currencyCode:
          $ref: '#/components/schemas/CurrencyCode'
        credentials:
          type: object
          description: |
            Operation credentials structure varies depending on payment method and integration.
            If credentials are marked as customerAccountPrefillable, they can be optional
            when customerAccountId is provided instead.
          x-go-type: pgw.dev/lib/fbk/types/jewson.Object
        failUrl:
          type: string
          format: uri
          maxLength: 255
          description: URL for customer redirect after failed payment
        successUrl:
          type: string
          format: uri
          maxLength: 255
          description: URL for customer redirect after successful payment
        merchantOperationId:
          type: string
          maxLength: 255
          description: Unique identifier of operation in merchant's platform
      required:
      - amount
      - currencyCode
      - credentials
    CashierInitTransactionResponseBody:
      type: object
      properties:
        operationId:
          description: Unique identifier of operation assigned by FinteqHub
          $ref: '#/components/schemas/ULID'
        transactionId:
          description: Unique identifier of transaction assigned by FinteqHub
          $ref: '#/components/schemas/ULID'
        sessionId:
          type: string
          description: Session ID assigned by FinteqHub
        customerId:
          description: Unique identifier of customer assigned by FinteqHub
          $ref: '#/components/schemas/ULID'
        url:
          type: string
          format: uri
          description: |
            URL for customer redirect to continue transaction processing.
            Present if interactionType = 'redirect'.
            If error is present, this is error URL for customer redirect.
        error:
          type: string
          description: |
            Operation decline reason if any error received from integration.
            Might be internal error message or error message received from integration.
      required:
      - operationId
      - transactionId
    RefreshTokenRequestBody:
      type: object
      properties:
        refreshToken:
          type: string
          description: |
            Opaque refresh token obtained from cashier-methods endpoint.
            Used to obtain a new accessToken when the current one expires.
      required:
      - refreshToken
    RefreshTokenResponseBody:
      type: object
      properties:
        accessToken:
          type: string
          format: jwt
          description: New JWT access token for authenticating subsequent API calls
        refreshToken:
          type: string
          description: |
            New opaque refresh token for future token renewals.
            The old refreshToken becomes invalid after this call.
      required:
      - accessToken
      - refreshToken
  responses:
    "400":
      description: Invalid request data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponseBody'
    "408":
      description: Request timeout
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponseBody'
    "500":
      description: Server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponseBody'
    "401":
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponseBody'
    "403":
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponseBody'
    "404":
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponseBody'
  parameters:
    VirtualPaymentMethodID:
      description: Virtual paymentMethod id
      in: path
      name: name
      required: true
      schema:
        type: string
    TransactionType:
      description: Transaction type
      in: path
      required: true
      name: txType
      schema:
        $ref: '#/components/schemas/TxType'
    Currency:
      description: ISO-4217 currency code
      in: query
      name: currency
      schema:
        $ref: '#/components/schemas/CurrencyCode'
    CurrencyCode:
      description: ISO-4217 currency code
      in: query
      name: currencyCode
      schema:
        $ref: '#/components/schemas/CurrencyCode'
    UserCountry:
      description: ISO-3166-alpha2 country code
      in: query
      name: userCountry
      schema:
        $ref: '#/components/schemas/Country'
    UserCountryCode:
      description: ISO-3166-alpha2 country code
      in: query
      name: userCountryCode
      schema:
        $ref: '#/components/schemas/Country'
    MerchantID:
      description: Merchant short ID, provided to you by the FinteqHub team.
      in: header
      name: x-merchant-id
      required: true
      schema:
        type: string
    ProjectID:
      description: Project ID in FinteqHub.
      in: header
      name: x-project-id
      required: true
      schema:
        type: string
        $ref: '#/components/schemas/ULID'
    UUID:
      description: UUID
      in: path
      name: uuid
      required: true
      schema:
        $ref: '#/components/schemas/ULID'
    TransactionID:
      description: Transaction ID in FinteqHub.
      in: path
      name: uuid
      required: true
      schema:
        $ref: '#/components/schemas/ULID'
    CustomerUUID:
      description: Customer ID in FinteqHub.
      in: path
      name: uuid
      required: true
      schema:
        $ref: '#/components/schemas/ULID'
    CustomerID:
      description: UUID
      in: path
      name: customer_id
      required: true
      schema:
        $ref: '#/components/schemas/ULID'
    RequestID:
      description: |
        Request ID – random UUIDv4.</br>
        The header is used to ensure the idempotency of POST requests. In the context of API, idempotence is the concept of multiple requests having the same effect as a single request.
        Upon receiving a new request with identical parameters, we will respond with results of the original request.
      in: header
      name: x-request-id
      required: true
      schema:
        $ref: '#/components/schemas/ULID'
    AcceptEncoding:
      description: |
        The Accept-Encoding HTTP request header advertises which content encoding, usually a compression algorithm, the client is able to understand.</br>
        Using content negotiation, the server selects one of the proposals, uses it and informs the client of its choice with the Content-Encoding response header.</br>
        FinteqHub supports `gzip` compression method.
      in: header
      name: accept-encoding
      required: false
      schema:
        type: string
    OperationID:
      description: Operation ID in FinteqHub.
      in: path
      name: uuid
      required: true
      schema:
        $ref: '#/components/schemas/ULID'
    CustomerAccountID:
      description: Customer account ID in FinteqHub.
      in: path
      name: accountUuid
      required: true
      schema:
        $ref: '#/components/schemas/ULID'
    CustomerAccount:
      description: If `true`, FinteqHub includes customer account(s) data in the response.
      in: query
      name: withCustomerAccount
      schema:
        type: string
        x-go-type: bool
        x-go-type-string-parse: strconv.ParseBool
    DateFrom:
      description: Start date of the period for which information is requested. Operations are filtered by creation date. Max allowed period is 7 days.
      in: query
      name: dateFrom
      required: true
      schema:
        $ref: '#/components/schemas/NullTime'
    DateTo:
      description: End date of the period for which information is requested. Operations are filtered by creation date. Max allowed period is 7 days.
      in: query
      name: dateTo
      required: true
      schema:
        $ref: '#/components/schemas/NullTime'
    OpTypes:
      description: Filter operations by operation type.
      in: query
      name: opType
      required: false
      schema:
        type: string
    TxTypes:
      description: Filter operations by transaction type.
      in: query
      name: txType
      required: false
      schema:
        type: string
    Integrations:
      description: Filter operations by payment integration.
      in: query
      name: integration
      required: false
      schema:
        type: string
    PaymentMethods:
      description: Filter operations by payment method.
      in: query
      name: paymentMethod
      required: false
      schema:
        type: string
    Offset:
      description: "Pagination offset. Specifies the number of records to skip.\nThe first request must be sent with empty parameter, for subsequent requests value must be taken from `offset` parameter in response \nuntil the empty offset is returned. Limit is 500 operations per request.\n"
      in: query
      name: offset
      required: false
      schema:
        type: string
    PathIntegrationType:
      description: Integration type
      in: path
      name: integrationType
      required: true
      schema:
        $ref: '#/components/schemas/IntegrationType'
    PathPaymentMethodType:
      description: Payment Method type
      in: path
      name: paymentMethodType
      required: true
      schema:
        $ref: '#/components/schemas/PaymentMethodType'
    PathMerchantID:
      description: Merchant short ID, provided to you by the FinteqHub team.
      in: path
      name: merchantId
      required: true
      schema:
        type: string
    QueryMerchantID:
      description: Merchant short ID, provided to you by the FinteqHub team.
      in: query
      name: merchantId
      required: true
      schema:
        type: string
    PathOperationID:
      description: Operation ID
      in: path
      name: operationId
      required: true
      schema:
        type: string
        $ref: '#/components/schemas/ULID'
    QueryOptionalOperationID:
      description: Operation ID
      in: query
      name: operationId
      required: false
      schema:
        type: string
        $ref: '#/components/schemas/ULID'
    QueryOptionalExtOperationID:
      description: External Operation ID
      in: query
      name: extTx
      required: false
      schema:
        type: string
    QueryOptionalProjectTokenID:
      description: Project ID
      in: query
      name: projectTokenId
      required: false
      schema:
        type: string
    QueryOptionalTerminalID:
      description: Terminal ID
      in: query
      name: terminalId
      required: false
      schema:
        type: string
  securitySchemes:
    Bearer:
      description: |
        Bearer authentication is an HTTP authentication scheme where the client sends a token, called a bearer token, with each request to authenticate access to a protected resource.
        To use it, send HTTP requests with an 'Authorization' header that contains the word 'Bearer' followed by a space and a token (JWS signature).
        Refer to [Signature](#tag/Signature) section.
      type: http
      scheme: bearer
      name: Authorization
      in: header
    JwsSignature:
      description: |
        API key authentication is a method where a unique key is passed with each request to identify and authenticate the client accessing an API.
        To use it, send HTTP requests with 'x-jws-signature' header that contains API key (JWS signature).
        Refer to [Signature](#tag/Signature) section.
      type: apiKey
      in: header
      name: x-jws-signature
    SID:
      description: |
        Provide FinteqHub session ID (SID) as API key in header. <br/>
        Example: `x-session-id: 0193e3c6-4753-deae-868e-123f5179bf6f`
      type: apiKey
      name: x-session-id
      in: header
