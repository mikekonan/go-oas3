package generator

import (
	"testing"

	"github.com/dave/jennifer/jen"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/mikekonan/go-oas3/configurator"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func setupSimpleGeneratorTest() *Generator {
	return &Generator{
		normalizer: &Normalizer{},
		typee: &Type{
			normalizer: &Normalizer{},
			config: &configurator.Config{
				ComponentsPackage: "components",
				Package:           "api",
			},
		},
		config: &configurator.Config{
			ComponentsPackage: "components",
			Package:           "api",
		},
		useRegex: make(map[string]string),
	}
}

func createSimpleTestSwagger() *openapi3.T {
	return &openapi3.T{
		OpenAPI: "3.0.3",
		Info: &openapi3.Info{
			Title:   "Test API",
			Version: "1.0.0",
		},
		Paths:      &openapi3.Paths{},
		Components: &openapi3.Components{},
	}
}

func TestSimpleGenerator_Generate(t *testing.T) {
	generator := setupSimpleGeneratorTest()
	swagger := createSimpleTestSwagger()

	result := generator.Generate(swagger)

	require.NotNil(t, result)
	assert.NotNil(t, result.ComponentsCode)
	assert.NotNil(t, result.RouterCode)
	assert.NotNil(t, result.SpecCode)
}

func TestSimpleGenerator_file(t *testing.T) {
	generator := setupSimpleGeneratorTest()

	// Create a simple code statement to add to the file
	codeStmt := jen.Comment("Test code")

	// Test with components package
	componentsFile := generator.file(codeStmt, "components")
	assert.NotNil(t, componentsFile)

	// Test with regular package
	apiFile := generator.file(codeStmt, "github.com/test/api")
	assert.NotNil(t, apiFile)

	// Verify header comment is added
	componentsCode := componentsFile.GoString()
	assert.Contains(t, componentsCode, "This file is generated by github.com/mikekonan/go-oas3. DO NOT EDIT.")
}

func TestSimpleGenerator_trimPackagePath(t *testing.T) {
	generator := setupSimpleGeneratorTest()

	tests := []struct {
		name        string
		packagePath string
		expected    string
	}{
		{
			name:        "Simple package name",
			packagePath: "api",
			expected:    "api",
		},
		{
			name:        "Full package path",
			packagePath: "github.com/user/project/api",
			expected:    "api",
		},
		{
			name:        "Empty package path",
			packagePath: "",
			expected:    "",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := generator.trimPackagePath(tt.packagePath)
			assert.Equal(t, tt.expected, result)
		})
	}
}